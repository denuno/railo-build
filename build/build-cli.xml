<project name="build-cli" default="build.cli" xmlns:antcontrib="antlib:net.sf.antcontrib" basedir=".">

	<property name="cli.version" value="0.1.1" />
	<property name="cli.packager.name" value="Railo Technologies" />
	<property name="cli.packager.email" value="railo@getrailo.com" />

	<target name="build.cli" description="creates an jar with the libs cli" depends="set.build.info">
		<property name="runcli.jar.file" value="${dist.dir}/cli/railo-cli.jar"/>
   		<delete dir="${dist.dir}/cli" />
   		<delete dir="${temp.dir}/cli" />
		<mkdir dir="${temp.dir}/cli" />
		<mkdir dir="${dist.dir}/cli" />
        <!--  create no asm jetty runner -->
		<mkdir dir="${temp.dir}/cli/jetty" />
	    <unzip dest="${temp.dir}/cli/jetty">
			<!-- <fileset file="${railo.lib.dir}/javax.servlet.jar"/> --> 
			<fileset dir="${cfdistro.basedir}/lib/" includes="${jetty-runner.jar}" /> 
	    </unzip>
	    <delete dir="${temp.dir}/cli/jetty/org/objectweb/" />
		<zip destfile="${temp.dir}/cli/${jetty-runner.jar}">
			<fileset dir="${temp.dir}/cli/jetty" /> 
		</zip>
   		<delete dir="${temp.dir}/cli/jetty" />
        <!--  copy in runwar to set a custom icon, etc. -->
        <copy file="${cfdistro.basedir}/lib/runwar.jar" todir="${temp.dir}/cli" />
		<!--  compile the loader and the runner together, tho we will separate them into different jars -->
        <javac-ecj srcdir="${basedir}/resource/cli/src" destdir="${temp.dir}/cli/bin" maxmemory="128M"
        	compliance="${railo.javac.compiler}" classpath="${toString:classpath}" />
		<!-- icon for cli -->
        <copy file="${basedir}/resource/railo.png" todir="${temp.dir}/cli/bin/railocli" />
		<!-- use same icon for runwar -->
        <zip destfile="${temp.dir}/cli/runwar.jar" update="true">
        	<zipfileset file="${temp.dir}/cli/bin/railocli/railo.png" fullpath="runwar/icon.png" />
        </zip>
        <!-- 
		<property name="runwar.jar.location" value="${temp.dir}/runwar.jar" />
		<antcontrib:runtarget target="runwar.jetty.jar"/>
         -->
       	<!-- we put the loader into a jar and then into libs.zip for classloading reasons -->
		<jar destfile="${temp.dir}/cli/railocli.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="railocli.CLIMain" />
			</manifest>
			<fileset dir="${temp.dir}/cli/bin">
				<exclude name="cliloader/*" />
			</fileset>
			<zipgroupfileset file="${temp.dir}/cli/jetty-runner.jar" />
		</jar>
		<delete dir="${temp.dir}/cli/bin/railocli" />

		<!--  create the libs zip including cli loader -->	    
		<zip destfile="${temp.dir}/cli/libs.zip">
          	<fileset file="${railobuild.dist.dir}/jar/railo-${railo.build.version.long}.jar" />
	        <fileset dir="${railo.lib.dir}">
	            <exclude name="**/railo-loader.jar"/>
	            <exclude name="**/javax.servlet.jar"/>

	            <include name="**/*.jar"/>
	        </fileset>
	        <fileset file="${temp.dir}/cli/railocli.jar" />
	        <fileset file="${temp.dir}/cli/runwar.jar" />
			<fileset file="${temp.dir}/cli/${jetty-runner.jar}" />
		</zip>
		<delete file="${temp.dir}/cli/railocli.jar" />
		<delete file="${temp.dir}/runwar.jar" />

		<jar destfile="${runcli.jar.file}" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="cliloader.LoaderCLIMain" />
			</manifest>
			<zipgroupfileset file="${temp.dir}/cli/jetty-runner.jar" />
			<fileset file="${temp.dir}/cli/libs.zip" />
			<fileset dir="${temp.dir}/cli/bin" />
		</jar>
 	</target>

	<target name="build.cli.bin" description="creates an jar with the libs cli" depends="build.cli">
        <concat destfile="${dist.dir}/cli/railo" force="yes" binary="true">
          <fileset file="${basedir}/resource/cli/railo.sh" />
          <fileset file="${dist.dir}/cli/railo-cli.jar" />
        </concat>
        <chmod file="${dist.dir}/cli/railo" perm="a+x"/>
		<zip destfile="${dist.dir}/cli/railo.bin.zip">
	        <zipfileset file="${dist.dir}/cli/railo" filemode="711" prefix="" />
			<zipfileset file="${basedir}/resource/cli/shell.cfm" prefix="" />
		</zip>
 	</target>

	<target name="build.cli.exe" description="creates an jar with the libs cli" depends="build.cli">
        <jar2exe
        	jar="${dist.dir}/cli/railo-cli.jar" exe="${dist.dir}/cli/railo.exe"  
        	icon="${basedir}/resource/railo.ico" mutexName="railo.cli.Console" 
        	headerType="console" customProcName="false" stayAlive="true"/>
		<zip destfile="${dist.dir}/cli/railo.win32.zip">
	        <zipfileset file="${dist.dir}/cli/railo.exe" prefix="" />
			<zipfileset file="${basedir}/resource/cli/shell.cfm" prefix="" />
		</zip>
	</target>

 	<target name="build.cli.jre" depends="build.cli">
 		<echo message="bundling ${mvn.jre.version} jre" />
		<zip destfile="${dist.dir}/cli/cli-jre-win32.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-win32.zip"/>
	        <fileset file="${dist.dir}/cli/railo.exe" />
			<zipfileset file="${basedir}/resource/cli/shell.cfm" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-win64.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-win64.zip"/>
	        <fileset file="${dist.dir}/cli/railo.exe" />
			<zipfileset file="${basedir}/resource/cli/shell.cfm" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-linux32.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-linux32.zip"/>
	        <fileset file="${dist.dir}/cli/railo" />
			<zipfileset file="${basedir}/resource/cli/shell.cfm" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/cli/cli-jre-linux64.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-linux64.zip"/>
	        <fileset file="${dist.dir}/cli/railo" />
			<zipfileset file="${basedir}/resource/cli/shell.cfm" prefix="" />
		</zip>
		<pom-and-deploy pomid="cli-jre.pom" packaging="pom"
		 groupId="org.getrailo" artifactId="railo.cli.jre" version="${cli.version}" name="railo.cli.jre">
			<attachments>
        		<attach file="${dist.dir}/cli/cli-jre-win32.zip" type="zip" classifier="win32"/>
        		<attach file="${dist.dir}/cli/cli-jre-win64.zip" type="zip" classifier="win64"/>
        		<attach file="${dist.dir}/cli/cli-jre-linux32.zip" type="zip" classifier="linux32"/>
        		<attach file="${dist.dir}/cli/cli-jre-linux64.zip" type="zip" classifier="linux64"/>
			</attachments>
		</pom-and-deploy>
 	</target>

 	<target name="build.cli.express" depends="build.cli">
 		<delete dir="${temp.dir}/express" />
 		<mkdir dir="${temp.dir}/express" />
 		<mkdir dir="${dist.dir}/express" />
 		<mkdir dir="${temp.dir}/express/webroot" />
 		<echo message="bundling ${mvn.jre.version} jre" />
 		<echo file="${temp.dir}/express/start.bat">%CD%\railo -server -background --port 8888 --war %CD%\webroot --open-browser true --open-url /</echo>
 		<echo file="${temp.dir}/express/start.cmd">#!/bin/bash
reldir=`dirname $0`
cd $reldir/build
./railo -server -background --port 8888 --war %CD%\webroot --open-browser true --open-url /
</echo>
 		<echo file="${temp.dir}/express/webroot/index.cfm"><![CDATA[<cfoutput><h2>Welcome to Railo!</h2><cfdump var="#server#"/></cfoutput>]]></echo>
		<zip destfile="${dist.dir}/express/cli-express-jre-win32.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-win32.zip"/>
	        <fileset file="${dist.dir}/cli/railo.exe" />
	        <fileset file="${temp.dir}/express/start.bat" />
	        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
		</zip>
		<zip destfile="${dist.dir}/express/cli-express-jre-win64.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-win64.zip"/>
	        <fileset file="${dist.dir}/cli/railo.exe" />
	        <fileset file="${temp.dir}/express/start.bat" />
	        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
		</zip>
		<zip destfile="${dist.dir}/express/cli-express-jre-linux32.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-linux32.zip"/>
	        <fileset file="${dist.dir}/cli/railo" />
	        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
		</zip>
		<zip destfile="${dist.dir}/express/cli-express-jre-linux64.zip">
			<zipgroupfileset file="${maven.repo.local}/oracle/jre/${mvn.jre.version}/jre-${mvn.jre.version}-linux64.zip"/>
	        <fileset file="${dist.dir}/cli/railo" />
	        <zipfileset dir="${temp.dir}/express/webroot" prefix="webroot/" />
		</zip>
		<pom-and-deploy pomid="cli-express.pom" packaging="pom"
		 groupId="org.getrailo" artifactId="railo.cli.express" version="${cli.version}" name="railo.cli.express">
			<attachments>
        		<attach file="${dist.dir}/express/cli-express-jre-win32.zip" type="zip" classifier="win32"/>
        		<attach file="${dist.dir}/express/cli-express-jre-win64.zip" type="zip" classifier="win64"/>
        		<attach file="${dist.dir}/express/cli-express-jre-linux32.zip" type="zip" classifier="linux32"/>
        		<attach file="${dist.dir}/express/cli-express-jre-linux64.zip" type="zip" classifier="linux64"/>
			</attachments>
		</pom-and-deploy>
 	</target>

 	<target name="build.cli.mvn" depends="build.cli.rpm,build.cli.deb,build.cli.exe">
		<pom-and-deploy pomid="cli.pom" packaging="pom"
			groupId="org.getrailo" artifactId="railo.cli" version="${cli.version}"
			name="railo.cli">
			<attachments>
				<attach file="${dist.dir}/cli/railo-cli.jar" type="jar" />
				<attach file="${dist.dir}/cli/railo.bin.zip" type="zip" classifier="bin" />
				<attach file="${dist.dir}/cli/railo.win32.zip" type="zip" classifier="win32" />
				<attach file="${dist.dir}/railo-cli_${cli.version}-1_all.deb" type="deb" />
				<attach file="${dist.dir}/rpm/railo-cli-${cli.version}-1.noarch.rpm" type="rpm" />
			</attachments>
		</pom-and-deploy>
	</target>

 	<target name="build.cli.all" depends="build.cli.mvn,build.cli.express,build.cli.jre">
	</target>

	<target name="build.cli.rpm" depends="build.cli.bin"  xmlns:redline="antlib:org.redline_rpm">
		<mkdir dir="${dist.dir}/rpm" />
		<echo message="Making rpm in ${dist.dir}/rpm/ Packager:${cli.packager.name} ${cli.packager.email} Version: ${cli.version}" />
		<redline:rpm destination="${dist.dir}/rpm" release="1"
			group="org.getrailo" name="railo-cli" version="${cli.version}"
			packager="${cli.packager.name} ${cli.packager.email}"
			url="http://getrailo.org">
			<depends name="java" version=""/>
			<tarfileset file="${dist.dir}/cli/railo" prefix="/usr/bin"
				 filemode="744" username="root" group="root"/>
		</redline:rpm>
	</target>

	<target name="build.cli.deb" depends="build.cli.bin" description="builds a .deb file for debian-based systems">
	    <taskdef name="deb" classname="com.googlecode.ant_deb_task.Deb" classpathref="build.lib.path"/>
	   	<echo message="Creating debian .deb file from: ${dist.dir}"/>
	   	<delete file="${dist.dir}/railo-cli-${cli.version}-1_all.deb" />
	   	<deb
	        todir="${dist.dir}"
	        package="railo-cli"
	        section="web"
	        depends="sun-java6-jre | openjdk-6-jre">
	        <version upstream="${cli.version}"/>
	        <maintainer name="${cli.packager.name}" email="${cli.packager.email}"/>
	        <description synopsis="Railo CFML Engine">Railo is a high performance CFML engine.  Version: ${railo.build.version.long}.</description>
	   		<tarfileset file="${dist.dir}/cli/railo" prefix="usr/local/bin" filemode="755"/>
	   	</deb>
	</target>

<!-- 
**************************************************************************
ONE JAR version.  Eats a *lot* of memory but doesn't write anything to disk
**************************************************************************
-->

	<macrodef name="one-jar-macro">
		<attribute name="destfile" default="one-jar.jar" />
		<attribute name="manifest" />
		<attribute name="mainmanifest" />
		<attribute name="onejarboot"/>
		<element name="main" />
		<element name="top" optional="true"/>
		<element name="lib" optional="true"/>
		<element name="binlib" optional="true"/>
        <element name="wrap" optional="true"/>      
		<sequential>
			<tempfile prefix="one-jar-" property="tmp.dir" />
			<property name="tmp.jar.dir" value="${tmp.dir}/jars"/>
			<echo>tmp.jar.dir=${tmp.jar.dir}</echo>
			<mkdir dir="${tmp.jar.dir}"/>
            <mkdir dir="${tmp.dir}/top" />
			<copy todir="${tmp.dir}/top">
				<top/>
			</copy>
            <mkdir dir="${tmp.dir}/main" />
			<copy todir="${tmp.dir}/main" >
				<main/>
			</copy>
			<mkdir dir="${tmp.jar.dir}/lib" />
			<copy todir="${tmp.jar.dir}/lib">
				<lib/>
                <fileset dir="." excludes="**"/>
			</copy>
            <mkdir dir="${tmp.jar.dir}/wrap" />
            <copy todir="${tmp.jar.dir}/wrap">
                <wrap/>
                <fileset dir="." excludes="**"/>
            </copy>
			<mkdir dir="${tmp.jar.dir}/binlib" />
			<copy todir="${tmp.jar.dir}/binlib" >
				<binlib/>
				<fileset dir="." excludes="**"/>
			</copy>
			<unjar dest="${tmp.jar.dir}" src="@{onejarboot}">
                <patternset>
                    <include name="**/*.class"/>
                    <include name=".version"/>   
                    <include name="doc/**"/>   
                </patternset>
            </unjar>            
			<mkdir dir="${tmp.jar.dir}/main"/>
			<jar destfile="${tmp.jar.dir}/main/main.jar" manifest="@{mainmanifest}">
				<fileset dir="${tmp.dir}/main">
					<include name="**/*"/>
				</fileset>
			</jar>
			<jar destfile="@{destfile}" manifest="@{manifest}">
				<fileset dir="${tmp.jar.dir}">
					<include name="**/*"/>
				</fileset>
				<fileset dir="${tmp.dir}/top">
					<include name="**/*"/>
				</fileset>
			</jar>
			<delete dir="${tmp.dir}"/>
			<echo>Created @{destfile}</echo>
		</sequential>
	</macrodef>

    <property name="onejar.ant.tasks.jar" location="${ant.home}/lib/one-jar-ant-task-0.97.jar" />
    <property name="onejarboot.ant.tasks.jar" location="${ant.home}/lib/one-jar-boot-0.97.jar" />
    <property name="onejar.ant.tasks.bootstrap.location" value="http://softlayer.dl.sourceforge.net/project/one-jar/one-jar/one-jar-0.97/one-jar-ant-task-0.97.jar" />
    <property name="onejarboot.ant.tasks.bootstrap.location" value="http://one-jar.cvs.sourceforge.net/*checkout*/one-jar/one-jar/dist/one-jar-boot-0.96.jar" />
    <available property="onejar.ant.tasks.jar.exists" file="${onejar.ant.tasks.jar}" />

    <!-- This will download the "latest version" of the maven-ant-tasks if needed -->
    <target name="bootstrap_onejar" unless="onejar.ant.tasks.jar.exists">
        <get src="${onejar.ant.tasks.bootstrap.location}" dest="${onejar.ant.tasks.jar}" />
        <get src="${onejarboot.ant.tasks.bootstrap.location}" dest="${onejarboot.ant.tasks.jar}" />
    </target>

	<target name="build.cli.onejar" depends="set.build.info">
		<runwar.initprops />
		<taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask" 
        	classpath="${onejar.ant.tasks.jar}" onerror="report"/>
   		<delete dir="${temp.dir}/cli" />
		<mkdir dir="${temp.dir}/cli" />
		<mkdir dir="${dist.dir}/cli" />
        <javac-ecj srcdir="${basedir}/resource/cli/src" destdir="${temp.dir}/cli" 
        	compliance="${railo.javac.compiler}" classpath="${toString:classpath}" />
        <one-jar destfile="${dist.dir}/cli/railo-cli.jar">
			<manifest>
				<attribute name="Main-Class" value="com.simontuffs.onejar.Boot" />
				<attribute name="One-Jar-Main-Class" value="railocli.CLIMain" />
			</manifest>
			<main>
		        <fileset dir="${temp.dir}/cli" />
			</main>
            <lib>
            	<fileset file="${railobuild.dist.dir}/jar/railo-${railo.build.version.long}.jar" />
		        <fileset dir="${railo.lib.dir}">
		            <exclude name="**/railo-loader.jar"/>
		            <include name="**/*.jar"/>
		        </fileset>
            </lib>
        </one-jar>
        <concat destfile="${dist.dir}/cli/railo" force="yes" binary="true">
          <fileset file="${basedir}/resource/cli/railo.sh" />
          <fileset file="${dist.dir}/cli/railo-cli.jar" />
        </concat>
        <chmod file="${dist.dir}/cli/railo" perm="a+x"/>
        <!-- 
        <jar2exe jar="${dist.dir}/cli/railo-cli.jar" exe="${dist.dir}/cli/railo-cli.exe" icon="${basedir}/resource/railo.ico" />
         -->
	</target>	


		
</project>
