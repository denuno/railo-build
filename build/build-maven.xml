<project name="build-maven" default="build.mvn" xmlns:antcontrib="antlib:net.sf.antcontrib" xmlns:artifact="antlib:org.apache.maven.artifact.ant" basedir=".">

   	<!-- 
   	<property name="mvn.type" value="snapshot" />
   	-->
   	<property name="mvn.type" value="release" />
    <property name="mvn.repo.dest" value="remote" />
    <property name="mvn.repo.dest" value="local" />
    <property name="mvn.repo.id" value="mvn.repo.${mvn.repo.dest}" />
    <property name="maven.repo.local" location="${pub.dir}/maven2" />

	<artifact:remoteRepository id="mvn.repo.local" url="file://${maven.repo.local}" />

    <property name="repository.username" value="cfml" />
    <property name="repository.privatekey" value="${basedir}/mvnkey.key" />
    <artifact:remoteRepository id="mvn.repo.remote" url="scp://loganberry.viviotech.net:10022/home/cfml/railo-build/pub/maven2">
      	<authentication username="${repository.username}" privateKey="${repository.privatekey}"/>
    </artifact:remoteRepository>
       	
  	<property name="mvn.remote.repo" 
   		value="http://127.0.0.1:8081/nexus/content/repositories/railo-${mvn.type}s/" />

    <property name="maven.ant.tasks.jar" value="${ant.home}/lib/maven-ant-tasks-2.1.3.jar" />
    <property name="maven.ant.tasks.bootstrap.location" value="http://apache.osuosl.org/maven/binaries/maven-ant-tasks-2.1.3.jar" />
	<path id="maven.ant.tasks.classpath" path="${maven.ant.tasks.jar}" />
    <available property="maven.ant.tasks.jar.exists" file="${maven.ant.tasks.jar}" />

    <!-- This will download the "latest version" of the maven-ant-tasks if needed -->
    <target name="bootstrap_maven" unless="maven.ant.tasks.jar.exists">
        <get src="${maven.ant.tasks.bootstrap.location}" dest="${maven.ant.tasks.jar}" />
    </target>

    <!-- This will initialize all the maven ant tasks and download the requested artifact and its dependencies -->
    <target name="get" depends="bootstrap_maven" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
        <path id="maven.ant.tasks.classpath" path="${maven.ant.tasks.jar}" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven.ant.tasks.classpath" />
        <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
            <isset property="maven.repo.local" />
        </condition>
        <echo>maven.repo.local=${maven.repo.local}</echo>
        <artifact:localRepository id="local.repository" path="${maven.repo.local}" />
        <artifact:dependencies pathId="build.classpath" sourcesFilesetId="sources.id">
            <dependency groupId="${mvn.get.groupId}" artifactId="${mvn.get.artifactId}" version="${mvn.get.version}"/>
            <localRepository refid="local.repository" />
        </artifact:dependencies>
    </target>

    <target name="mvn.deploy.libs" depends="bootstrap_maven,set.build.info" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
			uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.ant.tasks.classpath" />
           			
		<!-- wrap all the libs up into one dependency -->
		<zip destfile="${temp.dir}/railo-libs.zip" update="true">
			<fileset dir="${src.dir}/railo-java/libs" excludes="railo-loader.jar" />
		</zip>
		<pom-and-sshit pomid="railolibs.pom" packaging="pom"
		 groupId="org.getrailo" artifactId="railo.libs" version="${railo.build.version.major}.0" name="railo.libs">
			<attachments>
        		<attach file="${temp.dir}/railo-libs.zip" type="zip"/>
			</attachments>
		</pom-and-sshit>
		<delete file="${temp.dir}/railo-libs.zip" />
	</target>

    <target name="mvn.deploy.core" depends="bootstrap_maven,set.build.info" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
			uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.ant.tasks.classpath" />
		<!-- deploy the railo.jar file (railo.core) -->
		<pom-and-sshit pomid="railo.core.pom" packaging="pom"
		 groupId="org.getrailo" artifactId="railo.core" version="${railo.build.version.long}" name="railo.core">
        	<dependencies>
        		<dependency groupId="org.getrailo" artifactId="railo.libs" version="${railo.build.version.major}.0" type="zip"/>
        	</dependencies>
        	<attachments>
        		<attach file="${railobuild.dist.dir}/jar/railo-${railo.build.version.long}.jar" type="jar"/>
        		<attach file="${railobuild.dist.dir}/rc/${railo.build.version.long}.rc" type="rc"/>
        	</attachments>
		</pom-and-sshit>

		<!-- deploy the railo archtype-ish projects -->
		<copy file="${basedir}/resource/maven/railo.pom" tofile="${temp.dir}/railo.pom" overwrite="true">
			<filterchain><expandproperties /></filterchain>
		</copy>
		<pom-and-sshit pomid="railopom" file="${temp.dir}/railo.pom"  packaging="pom"
			artifact="${railobuild.dist.dir}/jar/railo-${railo.build.version.long}.jar"/>

		<copy file="${basedir}/resource/maven/railo-war.pom" tofile="${temp.dir}/railo-war.pom" overwrite="true">
			<filterchain><expandproperties /></filterchain>
		</copy>
		<pom-and-sshit pomid="railo-war.pom" file="${temp.dir}/railo-war.pom"
		  artifact="${railobuild.dist.dir}/jar/railo-${railo.build.version.long}.jar" packaging="pom" />

		<copy file="${basedir}/resource/maven/railo-jetty.pom" tofile="${temp.dir}/railo-jetty.pom" overwrite="true">
			<filterchain><expandproperties /></filterchain>
		</copy>
		<pom-and-sshit pomid="railo-jetty.pom" file="${temp.dir}/railo-jetty.pom" packaging="pom"
			artifact="${rai5lobuild.dist.dir}/jar/railo-${railo.build.version.long}.jar" />
	</target>

	<macrodef name="pom-and-sshit">
		<attribute name="pomid" />
		<attribute name="artifact" default="" />
		<attribute name="file" default="" />
		<attribute name="groupId" default="" />
		<attribute name="artifactId" default="" />
		<attribute name="version" default="" />
		<attribute name="name" default="" />
		<attribute name="packaging" default="jar" />
		<element name="dependencies" optional="true" />
		<element name="attachments" optional="true" />
		 <!-- <attach file="${basedir}/target/my-project-1.0-sources.jar" type="jar" classifier="sources"/> -->
		<sequential>
			<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
    		<echoproperties prefix="repository." />
			<antcontrib:if>
				<equals arg1="@{file}" arg2="" />
				<then>
					<artifact:pom id="@{pomid}" groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" name="@{name}" packaging="@{packaging}">
			        	<dependencies />
					</artifact:pom>
					<bug170workaround pomid="@{pomid}" />
				</then>
				<else>
					<artifact:pom id="@{pomid}" file="@{file}">
			        	<dependencies />
					</artifact:pom>
				</else>
			</antcontrib:if>

			<antcontrib:if>
				<equals arg1="@{artifact}" arg2="" />
				<then>
					<artifact:deploy>
					  <remoteRepository refid="${mvn.repo.id}" />
			          <attachments />
					  <pom refid="@{pomid}"/>
					</artifact:deploy>
				</then>
				<else>
					<artifact:deploy file="@{artifact}">
					  <remoteRepository refid="${mvn.repo.id}" />
			          <attachments />
					  <pom refid="@{pomid}"/>
					</artifact:deploy>
				</else>
			</antcontrib:if>
		</sequential>
	</macrodef>
		
	<macrodef name="bug170workaround">
		<attribute name="pomid" />
		<attribute name="dir" default="/tmp" />
		<sequential>
			<artifact:writepom pomrefid="@{pomid}" file="@{dir}/tmppom.xml" trim="true"/>
			<antcontrib:var name="@{pomid}" unset="true" />
			<artifact:pom id="@{pomid}" file="@{dir}/tmppom.xml" />
		</sequential>
	</macrodef>
		
</project>
