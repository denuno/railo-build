<project name="scm-git" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="${basedir}" />
		<element name="args" optional="true" />
		<sequential>
			<antcontrib:var name="git.results" unset="true" />
			<antcontrib:if>
				<or>
					<equals arg1="@{command}" arg2="archive" />
					<equals arg1="@{command}" arg2="pull" />
				</or>
				<then>
					<echo message="Using system Git - command: @{command}" />
					<exec executable="git" dir="@{dir}" outputproperty="git.results" failifexecutionfails="true">
						<arg value="@{command}" />
						<args />
					</exec>
				</then>
				<else>
					<echo message="JGit - command: @{command}" /><!-- <echoxml><elem /></echoxml> -->
		            <java classname="org.eclipse.jgit.pgm.Main" classpathref="build.lib.path" fork="true" dir="@{dir}" outputproperty="git.results">
						<arg value="@{command}" />
						<args />
		            </java>
				</else>
			</antcontrib:if>
			<echo message="${git.results}" />
		</sequential>
	</macrodef>
	
	<macrodef name="git-export">
		<attribute name="repository" />
		<attribute name="dest" />
		<attribute name="path" default="/" />
		<attribute name="tag" default="HEAD" />
		<sequential>
			<mkdir dir="@{dest}" />
			<antcontrib:if>
				<or>
					<contains string="@{repository}" substring="github" casesensitive="false" />
					<contains string="wee" substring="wee" casesensitive="false" />
				</or>
				<then>
					<antcontrib:var name="git.temp" unset="true" />
					<property name="git.temp" location="${temp.dir}/git-temp" />
					<echo message="no .git dir, let us try to get one- this may take a bit..." />
					<delete dir="${git.temp}"/>
					<mkdir dir="${git.temp}"/>
					<git-clone repository="@{repository}" tag="@{tag}" dest="${git.temp}" />
					<move todir="@{dest}">
					    <fileset dir="${git.temp}/@{path}"/>
					</move>
					<!--
					<copy todir="@{dest}">
						<fileset dir="${git.temp}">
				            <include name="@{path}"/>
						</fileset>
						<regexpmapper handledirsep="yes"
						from="@{path}(.*)"
						to="\1" />
					</copy>
					-->
					<!--
					<delete dir="${git.temp}"/>
					-->
				</then>
				<else>
					<git command="archive" dir="@{dest}">
						<args>
							<!-- <arg value="-a" /> -->
							<arg value="--format" />
							<arg value="zip" />
							<arg value="--output" />
							<arg value="src.zip" />
							<arg value="--remote" />
							<arg value="@{repository}" />
							<arg value="@{tag}" />
							<arg value="-0" />
						</args>
					</git>
					<unzip src="@{dest}/src.zip" dest="@{dest}">
				        <patternset>
				            <include name="@{path}"/>
				        </patternset>
						<regexpmapper handledirsep="yes"
						from="@{path}(.*)"
						to="\1" />
					</unzip>
					<delete file="@{dest}/src.zip"/>
				</else>
			</antcontrib:if>
		</sequential>
	</macrodef>

	<macrodef name="git-clone">
		<attribute name="repository" />
		<attribute name="dest" />
		<attribute name="tag" default="HEAD" />
		<sequential>
			<git command="clone">
				<args>
					<arg value="@{repository}" />
					<arg value="@{dest}" />
				</args>
			</git>
		</sequential>
	</macrodef>

	<macrodef name="git-checkout">
		<attribute name="repository" />
		<attribute name="branch" />
		<attribute name="force" default="false"/>
		<sequential>
			<antcontrib:if>
				<equals arg1="@{force}" arg2="true"/>
				<then>
					<echo message="FORCED checkout.  Any changes were overwritten!"/>
					<git command="checkout" dir="@{repository}">
						<args>
							<arg value="@{branch}" />
							<arg value="-f" />
						</args>
					</git>
				</then>
				<else>
					<git command="checkout" dir="@{repository}">
						<args>
							<arg value="@{branch}" />
						</args>
					</git>
				</else>
			</antcontrib:if>
		</sequential>
	</macrodef>

	<macrodef name="git-clone-pull">
		<attribute name="repository" />
		<attribute name="dest" />
		<sequential>
			<git command="clone">
				<args>
					<arg value="@{repository}" />
					<arg value="@{dest}" />
				</args>
			</git>
			<git command="pull" dir="@{dest}" />
		</sequential>
	</macrodef>

	<macrodef name="git-commit-hash">
		<attribute name="repository" />
		<attribute name="property" />
		<sequential>
			<git command="log" dir="${src.dir}"><args><arg value="-n"/><arg value="1"/></args></git>
			<antcontrib:propertyregex override="yes" property="@{property}" input="${git.results}" regexp=".*commit\s(.\w+).*" select="\1" />
		</sequential>
	</macrodef>

	<target name="jgit.help">
		<git command="branch">
			<args>
				<arg value="-h" />
			</args>
		</git>
	</target>

	<target name="src.import.git" depends="exists.src.xml">
		<xmltask sourcebuffer="src.buff">
			<call path="src/sources/src[@type='git']">
				<param name="dest" path="@dest" default="NONE" />
				<param name="type" path="@type" default="NONE" />
				<param name="uri" path="@uri" default="NONE" />
				<param name="path" path="@path" default="" />
				<param name="tag" path="@tag" default="HEAD" />
				<actions>
					<echo message="importing @{uri} @{tag} to src: ${src.dir}/@{dest}" />
					<git-export repository="@{uri}" dest="${src.dir}/@{dest}" path="@{path}" tag="@{tag}"/>
				</actions>
			</call>
		</xmltask>
	</target>

	<target name="project.update.git">
		<property name="temp.dir.absolute" location="${temp.dir}" />
		<antcontrib:var name="temp.dir" unset="true" />
		<property name="temp.dir" location="${temp.dir.absolute}" />				
		<property name="project.update.force" value="false" />				
		<xmltask sourcebuffer="src.buff">
			<call path="src/project/src[@type='git']">
				<param name="dest" path="@dest" default="NONE" />
				<param name="type" path="@type" default="NONE" />
				<param name="uri" path="@uri" default="NONE" />
				<param name="branch" path="@branch" default="master" />
				<param name="sshkey" path="@sshkey" default="NONE" />
				<actions>
					<antcontrib:if>
						<or>
							<not><available file="@{dest}.git" type="dir"/></not>
							<equals arg1="${project.overwrite}" arg2="true" />
						</or>
						<then>
							<echo message="@{dest}.git not there (or $${project.overwrite} is true), let us try to get one- this may take a [long-ass] bit..." />
							<git-clone repository="@{uri}" dest="@{dest}" />
							<antcontrib:if>
								<equals arg1="@{branch}" arg2="NONE" />
								<then/>
								<else>
									<git-checkout repository="@{dest}" branch="@{branch}"/>
								</else>
							</antcontrib:if>
						</then>
						<else>
							<echo message="updating src: @{dest}" />
							<!--
							-->
							<git command="fetch" dir="@{dest}"/>
							<git-checkout repository="@{dest}" branch="@{branch}" force="${project.update.force}"/>
						</else>
					</antcontrib:if>
				</actions>
			</call>
		</xmltask>
	</target>
	
	<target name="check.project.for.newrevision.git">
		<!-- check for local commits -->
		<xmltask sourcebuffer="src.buff">
			<call path="src/project/src[@type='git']">
				<param name="dest" path="@dest" default="NONE" />
				<param name="type" path="@type" default="NONE" />
				<param name="uri" path="@uri" default="NONE" />
				<actions>
					<antcontrib:var name="revisions.are.same" value="true"/>
					<antcontrib:var name="desthash" unset="true"/>
					<safestring value="@{dest}" property="desthash"/>
					<echo message="${desthash}"/>
					<git-commit-hash repository="@{dest}" property="pre.fetch.commit.hash" />
					<propertyfile file="${basedir}/scm.cache" comment="source control management cache">
						<entry key="${desthash}.last.commit.hash" default="${pre.fetch.commit.hash}" />
						<entry key="${desthash}.current.commit.hash" value="${pre.fetch.commit.hash}" />
					</propertyfile>
					<property file="${basedir}/scm.cache" />
					<antcontrib:propertycopy name="desthash.last.commit.hash" from="${desthash}.last.commit.hash" override="true"/>
					<antcontrib:propertycopy name="desthash.current.commit.hash" from="${desthash}.current.commit.hash" override="true"/>
					<echo>${desthash.last.commit.hash}" arg2="${desthash.current.commit.hash}</echo>
					<antcontrib:if>
						<equals arg1="${desthash.last.commit.hash}" arg2="${desthash.current.commit.hash}" />
						<then>
							<echo message="Local revision is unchanged" />
						</then>
						<else>
							<property name="revisions.local.differ" value="true" />
							<antcontrib:var name="revisions.are.same" value="false"/>
							<echo message="Local revision differs" />
						</else>
					</antcontrib:if>
					<!-- check for remote commits (defaults to origin) -->
					<git command="fetch" dir="@{dest}"/>
					<git command="log" dir="@{dest}">
						<args>
							<arg value="-n" />
							<arg value="1" />
							<arg value="--" />
							<arg value="HEAD..origin/master" />
						</args>
					</git>
					<antcontrib:if>
						<equals arg1="${git.results}" arg2="" />
						<then>
							<echo message="Remote revision is the same" />
						</then>
						<else>
							<antcontrib:var name="revisions.are.same" value="false"/>
							<property name="revisions.remote.differ" value="true" />
							<echo message="Remote revision differs" />
						</else>
					</antcontrib:if>
				</actions>
			</call>
		</xmltask>
		<echoproperties prefix="revisions"/>
	</target>

	<target name="exists.src.xml">
		<antcall target="cfdistro.exists.src.xml" />
	</target>
	
	
</project>