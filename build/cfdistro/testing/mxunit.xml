<project name="mxunit" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<dirname property="mxunit.basedir" file="${ant.file.mxunit}" />
	<property name="mxunit.tests.dir" location="${tests.dir}" />
	<property name="mxunit.runner" value="/mxunit/runner/HttpAntRunner.cfc" />
	<property name="mxunit.componentpath" value="tests" />
	<property name="mxunit.tests.results.dir" location="${dist.dir}/testresults" />
	<property name="mxunit.recurse" value="true" />
	<property name="mxunit.verbose" value="true" />
	<property name="mxunit.packageName" value="${mxunit.componentpath}" />
	<dirname property="mxunit.basedir" file="${ant.file.mxunit}" />
	<property name="mxunit.version" value="2.1.3" />
	<property name="ext.mxunit.dir" location="${ext.dir}/mxunit/${mxunit.version}" />
	<property name="mxunit.dir" location="${war.target.dir}/mxunit" />
	<property name="mxunit.failonerror" value="true" />

	<target name="mxunit.install">
		<dependency groupId="org.mxunit" artifactId="core" version="${mxunit.version}" mapping="/mxunit" />
	</target>

	<target name="mxunit.uninstall">
		<delete dir="${ext.mxunit.dir}" />
		<delete dir="${mxunit.dir}" />
	</target>

	<target name="mxunit.tests">
		<mxunit-call 
			path="${mxunit.tests.dir}" componentPath="${mxunit.componentpath}"
			packageName="${mxunit.packageName}" recurse="${mxunit.recurse}"
			outputdir="${mxunit.tests.results.dir}" failonerror="${mxunit.failonerror}" 
		/>
	</target>

	<target name="mxunit.tests.subdirectories">
		<mxunit-rundirs 
			basePath="${mxunit.tests.dir}" baseComponentPath="${mxunit.componentpath}"
			packageName="${mxunit.packageName}"
			outputdir="${mxunit.tests.results.dir}" failonerror="${mxunit.failonerror}" 
		/>
	</target>

	<target name="mxunit.tests.run">
		<server-run>
			<antcontrib:runtarget target="mxunit.tests" />
		</server-run>
	</target>

	<target name="build.mxunit.tests.run">
		<antcontrib:runtarget target="build" />
		<antcontrib:runtarget target="mxunit.tests.run" />
	</target>

	<target name="update.mxunit.tests.run">
		<antcontrib:runtarget target="project.update" />
		<antcontrib:runtarget target="build" />
		<antcontrib:runtarget target="mxunit.tests.run" />
	</target>

	<target name="ifnew.build.mxunit.tests.run">
		<mkdir dir="${war.target.dir}" />
		<property name="testresult.file" value="${war.target.dir}/test.results.html/" />
		<sequential>
			<antcontrib:runtarget target="project.update" />
			<antcontrib:if>
				<equals arg1="${revisions.are.same}" arg2="true" />
				<then>
					<echo message="Revisions are the same, not running tests" />
				</then>
				<else>
					<echo message="Revisions differ, running tests" />
					<sequential>
						<antcontrib:runtarget target="build.mxunit.tests.run" />
					</sequential>
				</else>
			</antcontrib:if>
		</sequential>
	</target>

	<target name="tests.results.text">
		<!--
		<trim-results dir="${mxunit.tests.results.dir}" />

		<result2text dir="${mxunit.tests.results.dir}" />
		-->
		<result2html dir="${mxunit.tests.results.dir}" />
	</target>

	 <macrodef name="trim-results">
	   <attribute name="dir" />
	   <sequential>
    	<antcontrib:for param="file">
			<path><fileset dir="@{dir}" includes="**/*.xml" /></path>
			<sequential>
				<echo message="file:@{file}" />
				<replaceregexp 
				        file="@{file}" 
				        match="([^\S])*" 
				        replace=""
				        byline="false" 
				/>
			</sequential>
		</antcontrib:for>
	   </sequential>
	 </macrodef>
	
	<macrodef name="result2text">
		<attribute name="dir"/>
		<sequential>
			<echo message="converting xml results in @{dir} to text" />
			<delete dir="${temp.dir}/plaintext"/>
			<xslt basedir="@{dir}" includes="**/*.xml" destdir="${temp.dir}/plaintext" 
			   extension=".txt" style="${mxunit.basedir}/results2text.xsl" failOnTransformationError="false"/>
			<concat>
				<fileset dir="${temp.dir}/plaintext" includes="**/*.txt" erroronmissingdir="false"/>
			</concat>
	    	<antcontrib:for param="file" description="sometimes errors will be in html files">
				<path><fileset dir="@{dir}" includes="**/*.html" /></path>
				<sequential>
					<echo message="Extracting content of html file: @{file}" />
					<replaceregexp file="@{file}" match="function oc\(id\).*Railo" replace=" " byline="false" flags="g,s"/>
					<antcontrib:var unset="true" name="_htmlfile" />
					<loadfile srcFile="@{file}" property="_htmlfile" />
					<antcontrib:propertyregex global="true" override="yes" 
					 property="_htmlfile" input="${_htmlfile}" regexp="&lt;[^&gt;]*&gt;" replace=" "/>
					<antcontrib:propertyregex global="true" override="yes" 
					 property="_htmlfile" input="${_htmlfile}" regexp="[\r|\n][\s]?[\r|\n]" replace="${line.separator}"/>
					 <echo message="${_htmlfile}" />
				</sequential>
			</antcontrib:for>
			<antcontrib:var unset="true" name="_htmlfile" />
		</sequential>
	</macrodef>

	<macrodef name="result2html">
		<attribute name="dir"/>
		<sequential>
			<echo message="converting xml results in @{dir} to html" />
			<delete dir="${temp.dir}/html"/>
			<mkdir dir="${temp.dir}/html"/>
			<!--
            <junitreport todir="${temp.dir}/html">
                    <fileset dir="@{dir}">
                            <include name="*.xml" />
                    </fileset>
                    <report format="noframes" todir="${temp.dir}/html" styledir="${mxunit.basedir}" />
            </junitreport>
			<fail/>
			-->
			<echo message="&lt;testsuites&gt;" file="${temp.dir}/html/testsuites.xml"/>
			<concat destfile="${temp.dir}/html/testsuites.xml" append="true">
				<filterchain>
					<replacetokens begintoken="&lt;" endtoken="&gt;">
						<token key="testsuites" value=""/>
						<token key="/testsuites" value=""/>
					</replacetokens>
				</filterchain>	
				<fileset dir="@{dir}" includes="**/*.xml" erroronmissingdir="false"/>
			</concat>
			<echo message="&lt;/testsuites&gt;" file="${temp.dir}/html/testsuites.xml" append="true"/>
			<delete dir="@{dir}/html"/>
			<mkdir dir="@{dir}/html"/>
			<xslt in="${temp.dir}/html/testsuites.xml" out="@{dir}/html/index.html" 
			   style="${mxunit.basedir}/junit-noframes.xsl" failOnTransformationError="false"/>
			<antcontrib:runtarget target="exists.mappings.xml" />
			<xmltask sourcebuffer="mappings.buff">
				<call path="mappings/mapping[@scmurl and string(@scmurl)]">
					<param name="virtual" path="@virtual" default="NONE" />
					<param name="physical" path="@physical" default="NONE" />
					<param name="scmurl" path="@scmurl" default="" />
					<actions>
						<antcontrib:var name="physical.dir.abs" unset="true"/>
						<property name="physical.dir.abs" location="@{physical}"/>
						<!-- replace mapping or source file location with relative path -->
						<antcontrib:propertyregex property="projectRelativePath" input="${physical.dir.abs}" 
						 regexp="${ext.dir}/mappings" replace="" global="true" override="yes"/>
						<antcontrib:propertyregex property="projectRelativePath" input="${physical.dir.abs}" 
						 regexp="${src.dir}" replace="" global="true" override="yes"/>
<!--<echo message="${projectRelativePath} : @{virtual} (@{physical} ${src.dir} @{scmurl}"/> -->
						<replaceregexp 
						        file="@{dir}/html/index.html" 
								match="@{virtual}(\/[^&quot;&apos;?()]+\/.*?\.cf[mc])\:?(\d+)?" flags="gi"
						        replace='&lt;a title="View Source Code" target="_blank" href="@{scmurl}${projectRelativePath}\1#L\2"&gt;@{virtual}\1:\2&lt;/a&gt;'
						        byline="false" 
						/>
						<replaceregexp 
						        file="@{dir}/html/index.html" 
								match="${src.dir}&lt;a" flags="gi"
						        replace='&lt;a'
						        byline="false" 
						/>
					</actions>
				</call>
			</xmltask>

		</sequential>
	</macrodef>

	<macrodef name="mxunit-rundirs">
		<attribute name="basePath"/>
		<attribute name="baseComponentPath" default="${mxunit.componentpath}"/>
		<attribute name="packageName" default="@{baseComponentPath}"/>
		<attribute name="failonerror" default="${mxunit.failonerror}"/>
		<attribute name="outputdir" default="${mxunit.tests.results.dir}"/>
		<sequential>
			<echo message="runing tests in (@{basePath})" />
			<abspath property="mxunit.tests.sub.dir.abs" path="@{basePath}" />
			<delete dir="@{outputdir}" />
			
	    	<antcontrib:for param="dir">
				<path><dirset dir="@{basePath}" includes="*"/></path>
				<sequential>
					<antcontrib:var unset="true" name="_dirname" />
					<basename file="@{dir}" property="_dirname" />
					<echo message="runing tests in @{dir} (${_dirname})" />
					<mxunit-call 
						path="${mxunit.tests.sub.dir.abs}/${_dirname}" componentPath="@{baseComponentPath}.${_dirname}"
						packageName="@{packageName}.${_dirname}" recurse="${mxunit.recurse}"
						outputdir="@{outputdir}/${_dirname}" failonerror="@{failonerror}"
					/>
				</sequential>
			</antcontrib:for>
		</sequential>
	</macrodef>

	<macrodef name="mxunit-call">
		<attribute name="path" default="${mxunit.tests.dir}"/>
		<attribute name="componentPath" default="${mxunit.componentpath}"/>
		<attribute name="packageName" default="@{componentPath}"/>
		<attribute name="recurse" default="${mxunit.recurse}"/>
		<attribute name="failonerror" default="${mxunit.failonerror}"/>
		<attribute name="outputdir" default="${mxunit.tests.results.dir}"/>
		<attribute name="defaultrunner" default="${mxunit.runner}"/>
		<attribute name="inspect" default="false"/>
		<sequential>
			<taskdef-dependency name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" artifactId="mxunit-ant" groupId="cfdistro.lib" version="1.0.0.0" />
			<delete dir="@{outputdir}" />
			<mkdir dir="@{outputdir}" />
			<antcontrib:var unset="true" name="tests.fail"/>
			<antcontrib:var unset="true" name="tests.error"/>
			<abspath property="mxunit.tests.dir.abs" path="@{path}" />
			<echo message="Running MXUnit - mxunit.failonerror:@{failonerror} outputdir:@{outputdir}" />
			<antcontrib:trycatch property="_erredbrah">
				<try>
					<antcontrib:if>
						<equals arg1="@{inspect}" arg2="true" />
						<then>
							<property name="testcasesxml" value="" />
					    	<antcontrib:for param="file">
								<path><fileset dir="${mxunit.tests.dir}" includes="**/*.cfc" casesensitive="no">
									<or>
										<contains text="org.railo.cfml.test.RailoTestCase"/>
										<contains text="mxunit.framework.TestCase"/>
									</or>
								</fileset>
								</path>
								<sequential>
									<antcontrib:propertyregex property="testcasecfc" input="@{file}" 
									 regexp="${mxunit.tests.dir}" replace="" global="true" override="yes"/>
									<antcontrib:propertyregex property="testcasecfc" input="${testcasecfc}" 
									 regexp="\\|/" replace="\." global="true" override="yes"/>
									<antcontrib:propertyregex property="testcasecfc" input="${testcasecfc}" 
									 regexp="^\.(.*)\.cfc$" replace="testcases.\1" global="true" override="yes"/>
									<antcontrib:propertyregex property="testcasecfcpackage" input="${testcasecfc}" 
									 regexp="(.*\..*)\.*$" replace="\1" global="true" override="yes"/>
									<antcontrib:var name="testcasesxml"
										value='${testcasesxml}&lt;testcase name="${testcasecfc}" packageName="${testcasecfcpackage}"/&gt;${line.separator}' />
								</sequential>
							</antcontrib:for>
							<echo file="${basedir}/build-testcasesrun.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<project><import file="${basedir}/build.xml"/>
								<target name="rundemtests">
								 <taskdef-dependency name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" artifactId="mxunit-ant" version="1.0.0.0" />
								<mxunittask server="${server.host}" port="${server.port.http}"
									defaultrunner="@{defaultrunner}" outputdir="@{outputdir}"
									failureproperty="tests.fail" errorproperty="tests.error" haltonerror="false"
						 			testResultsSummary="testresults.properties" verbose="true">
									${testcasesxml}
								</mxunittask>
								</target>
								</project>
								]]>
							</echo>
							<ant antfile="${basedir}/build-testcasesrun.xml" inheritAll="true" target="rundemtests" />
					    	<!--
					    	<delete file="${basedir}/build-testcasesrun.xml"/>
					    	-->
						</then>
						<else>
							<mxunittask server="${server.host}" port="${server.port.http}"
								defaultrunner="${mxunit.runner}" outputdir="@{outputdir}"
								failureproperty="tests.fail" errorproperty="tests.error" haltonerror="false"
								testResultsSummary="testresults.properties" verbose="true">
								<!-- <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" /> -->
								<directory runner="${mxunit.runner}"
									remoteMethod="run" path="${mxunit.tests.dir.abs}" componentPath="@{componentPath}"
									packageName="@{packageName}" recurse="@{recurse}" />
							</mxunittask>
						</else>
					</antcontrib:if>
				</try>
				<catch>
					<echo message="MXUnit run failed: ${_erredbrah}"/>
					<antcontrib:var name="tests.fail" value="true" />
				</catch>
			</antcontrib:trycatch>
			<antcontrib:if>
				<equals arg1="${mxunit.verbose}" arg2="true" />
				<then><result2text dir="@{outputdir}" /></then>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="${mxunit.verbose}" arg2="true" />
				<then><result2html dir="@{outputdir}" /></then>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="@{failonerror}" arg2="true" />
				<then>
					<fail if="tests.fail" message="mxunit.failonerror is true and mxunit tests failed!"/>
					<fail if="tests.error" message="mxunit.failonerror is true and mxunit tests erred!"/>
				</then>
			</antcontrib:if>
		</sequential>
	</macrodef>

	<macrodef name="testbox-rundirs">
		<attribute name="basePath"/>
		<attribute name="componentPath"/>
		<attribute name="runner" default="http://${runwar.host}:${runwar.port}/coldbox/testing/resources/tboxrunner.cfm?"/>
		<attribute name="recurse" default="true"/>
		<attribute name="labels" default=""/>
		<attribute name="failonerror" default="${mxunit.failonerror}"/>
		<attribute name="outputdir" default="${mxunit.tests.results.dir}"/>
		<sequential>
			<echo message="runing tests in (@{basePath})" />
			<abspath property="mxunit.tests.sub.dir.abs" path="@{basePath}" />
			<delete dir="@{outputdir}" />
	    	<antcontrib:for param="dir">
				<path><dirset dir="@{basePath}" includes="*"/></path>
				<sequential>
					<antcontrib:var unset="true" name="_dirname" />
					<basename file="@{dir}" property="_dirname" />
					<echo message="runing tests in @{dir} (${_dirname})" />
					<delete dir="@{outputdir}/${_dirname}"/>
					<mkdir dir="@{outputdir}/${_dirname}"/>
			        <get dest="@{outputdir}/${_dirname}/results.xml" ignoreerrors="true" retries="1"
			           src="@{runner}target=@{componentPath}.${_dirname}&amp;recurse=@{recurse}&amp;reporter=ANTJunit&amp;labels=@{labels}" 
			         />
				</sequential>
			</antcontrib:for>
			<antcontrib:if>
				<equals arg1="${mxunit.verbose}" arg2="true" />
				<then><result2text dir="@{outputdir}" /></then>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="${mxunit.verbose}" arg2="true" />
				<then><result2html dir="@{outputdir}" /></then>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="@{failonerror}" arg2="true" />
				<then>
					<fail if="tests.fail" message="mxunit.failonerror is true and testbox tests failed!"/>
					<fail if="tests.error" message="mxunit.failonerror is true and testbox tests erred!"/>
				</then>
			</antcontrib:if>
		</sequential>
	</macrodef>
	
	<macrodef name="testbox-call">
		<attribute name="path" default="${mxunit.tests.dir}"/>
		<attribute name="componentPath" default="${mxunit.componentpath}"/>
		<attribute name="runner" default="http://${runwar.host}:${runwar.port}/coldbox/testing/resources/tboxrunner.cfm?"/>
		<attribute name="recurse" default="true"/>
		<attribute name="labels" default=""/>
		<attribute name="failonerror" default="${mxunit.failonerror}"/>
		<attribute name="outputdir" default="${mxunit.tests.results.dir}"/>
		<attribute name="inspect" default="false"/>
		<sequential>
			<delete dir="@{outputdir}" />
			<mkdir dir="@{outputdir}" />
			<antcontrib:var unset="true" name="tests.fail"/>
			<antcontrib:var unset="true" name="tests.error"/>
			<abspath property="mxunit.tests.dir.abs" path="@{path}" />
			<echo message="Running TestBox - failonerror:@{failonerror} outputdir:@{outputdir}" />
			<antcontrib:trycatch property="_erredbrah">
				<try>
					<antcontrib:if>
						<equals arg1="@{inspect}" arg2="true" />
						<then>
							<property name="testcasesxml" value="" />
					    	<antcontrib:for param="file">
								<path><fileset dir="${mxunit.tests.dir}" includes="**/*.cfc" casesensitive="no">
									<or>
										<contains text="org.railo.cfml.test.RailoTestCase"/>
										<contains text="mxunit.framework.TestCase"/>
									</or>
								</fileset>
								</path>
								<sequential>
									<antcontrib:propertyregex property="testcasecfc" input="@{file}" 
									 regexp="${mxunit.tests.dir}" replace="" global="true" override="yes"/>
									<antcontrib:propertyregex property="testcasecfc" input="${testcasecfc}" 
									 regexp="\\|/" replace="\." global="true" override="yes"/>
									<antcontrib:propertyregex property="testcasecfc" input="${testcasecfc}" 
									 regexp="^\.(.*)\.cfc$" replace="testcases.\1" global="true" override="yes"/>
									<antcontrib:propertyregex property="testcasecfcpackage" input="${testcasecfc}" 
									 regexp="(.*\..*)\.*$" replace="\1" global="true" override="yes"/>
							        <get dest="@{outputdir}/TEST-${testcasecfc}.xml" ignoreerrors="true" retries="1"
							           src="@{runner}target=${testcasecfc}&amp;recurse=@{recurse}&amp;reporter=ANTJunit&amp;labels=@{labels}"
							         />
								</sequential>
							</antcontrib:for>
						</then>
						<else>
					        <get dest="@{outputdir}/TEST-@{componentPath}.xml" ignoreerrors="true" retries="1"
					           src="@{runner}target=@{componentPath}&amp;recurse=@{recurse}&amp;reporter=ANTJunit&amp;labels=@{labels}"
					         />
						</else>
					</antcontrib:if>
				</try>
				<catch>
					<echo message="TestBox run failed: ${_erredbrah}"/>
					<antcontrib:var name="tests.fail" value="true" />
				</catch>
			</antcontrib:trycatch>
			<antcontrib:if>
				<equals arg1="${mxunit.verbose}" arg2="true" />
				<then><result2text dir="@{outputdir}" /></then>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="${mxunit.verbose}" arg2="true" />
				<then><result2html dir="@{outputdir}" /></then>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="@{failonerror}" arg2="true" />
				<then>
					<fail if="tests.fail" message="mxunit.failonerror is true and mxunit tests failed!"/>
					<fail if="tests.error" message="mxunit.failonerror is true and mxunit tests erred!"/>
				</then>
			</antcontrib:if>
		</sequential>
	</macrodef>


</project>
