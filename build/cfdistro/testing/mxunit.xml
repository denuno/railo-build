<project name="mxunit" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<dirname property="mxunit.basedir" file="${ant.file.mxunit}" />
	<property name="mxunit.tests.dir" location="${tests.dir}" />
	<property name="mxunit.runner" value="/mxunit/runner/HttpAntRunner.cfc" />
	<property name="mxunit.componentpath" value="tests" />
	<property name="mxunit.tests.results.dir" location="${dist.dir}/testresults" />
	<property name="mxunit.recurse" value="true" />
	<property name="mxunit.verbose" value="true" />
	<property name="mxunit.packageName" value="${mxunit.componentpath}" />
	<dirname property="mxunit.basedir" file="${ant.file.mxunit}" />
	<property name="mxunit.version" value="2.1.3" />
	<property name="ext.mxunit.dir" location="${ext.dir}/mxunit/${mxunit.version}" />
	<property name="mxunit.dir" location="${war.target.dir}/mxunit" />

	<target name="mxunit.install">
		<dependency groupId="org.mxunit" artifactId="core" version="${mxunit.version}" mapping="/mxunit" />
	</target>

	<target name="mxunit.uninstall">
		<delete dir="${ext.mxunit.dir}" />
		<delete dir="${mxunit.dir}" />
	</target>

	<target name="mxunit.tests">
		<taskdef-dependency name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" artifactId="mxunit-ant" groupId="cfdistro.lib" version="1.0.0.0" />
		<mkdir dir="${mxunit.tests.results.dir}" />
		<property name="mxunit.failonerror" value="true" />
		<antcontrib:var name="tests.fail" unset="true" />
		<abspath property="mxunit.tests.dir.abs" path="${mxunit.tests.dir}" />
		<echo message="Running MXUnit - mxunit.failonerror:${mxunit.failonerror} outputdir:${mxunit.tests.results.dir}" />
		<antcontrib:trycatch property="_erredbrah">
			<try>
				<mxunittask server="${server.host}" port="${server.port.http}"
					defaultrunner="${mxunit.runner}" outputdir="${mxunit.tests.results.dir}"
					failureproperty="tests.fail" errorproperty="tests.error" haltonerror="false"
					testResultsSummary="testresults.properties" verbose="true">
					<!-- <testcase name="mxunit.tests.framework.AssertTest" packageName="mxunit.asserttests" /> -->
					<directory runner="${mxunit.runner}"
						remoteMethod="run" path="${mxunit.tests.dir.abs}" componentPath="${mxunit.componentpath}"
						packageName="${mxunit.packageName}" recurse="${mxunit.recurse}" />
				</mxunittask>
			</try>
			<catch>
				<echo message="MXUnit run failed: ${_erredbrah}"/>
				<antcontrib:var name="tests.fail" value="true" />
			</catch>
		</antcontrib:trycatch>
		<antcontrib:if>
			<equals arg1="${mxunit.verbose}" arg2="true" />
			<then><antcontrib:runtarget target="tests.results.text" /></then>
		</antcontrib:if>
		<antcontrib:if>
			<equals arg1="${mxunit.failonerror}" arg2="true" />
			<then>
				<fail if="tests.fail" message="mxunit.failonerror is true and mxunit tests failed!"/>
				<fail if="tests.error" message="mxunit.failonerror is true and mxunit tests erred!"/>
			</then>
		</antcontrib:if>
	</target>

	<target name="mxunit.tests.run">
		<server-run>
			<antcontrib:runtarget target="mxunit.tests" />
		</server-run>
	</target>

	<target name="build.mxunit.tests.run">
		<antcontrib:runtarget target="build" />
		<antcontrib:runtarget target="mxunit.tests.run" />
	</target>

	<target name="update.mxunit.tests.run">
		<antcontrib:runtarget target="project.update" />
		<antcontrib:runtarget target="build" />
		<antcontrib:runtarget target="mxunit.tests.run" />
	</target>

	<target name="ifnew.build.mxunit.tests.run">
		<mkdir dir="${war.target.dir}" />
		<property name="testresult.file" value="${war.target.dir}/test.results.html/" />
		<sequential>
			<antcontrib:runtarget target="project.update" />
			<antcontrib:if>
				<equals arg1="${revisions.are.same}" arg2="true" />
				<then>
					<echo message="Revisions are the same, not running tests" />
				</then>
				<else>
					<echo message="Revisions differ, running tests" />
					<sequential>
						<antcontrib:runtarget target="build.mxunit.tests.run" />
					</sequential>
				</else>
			</antcontrib:if>
		</sequential>
	</target>

	<target name="tests.results.text">
		<!--
		<trim-results dir="${mxunit.tests.results.dir}" />
		-->
		<result2text dir="${mxunit.tests.results.dir}" />
	</target>

	 <macrodef name="trim-results">
	   <attribute name="dir" />
	   <sequential>
    	<antcontrib:for param="file">
			<path><fileset dir="@{dir}" includes="*.xml" /></path>
			<sequential>
				<echo message="file:@{file}" />
				<replaceregexp 
				        file="@{file}" 
				        match="([^\S])*" 
				        replace=""
				        byline="false" 
				/>
			</sequential>
		</antcontrib:for>
	   </sequential>
	 </macrodef>
	
	<macrodef name="result2text">
		<attribute name="dir"/>
		<sequential>
			<echo message="converting xml results in @{dir} to text" />
			<delete dir="${temp.dir}/plaintext"/>
			<xslt basedir="@{dir}" includes="*.xml" destdir="${temp.dir}/plaintext" 
			   extension=".txt" style="${mxunit.basedir}/results2text.xsl" />
			<concat>
				<fileset dir="${temp.dir}/plaintext" includes="*.txt" erroronmissingdir="false"/>
			</concat>

		</sequential>
	</macrodef>


</project>