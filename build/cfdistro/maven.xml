<project name="maven" default="nexus.install" xmlns:aether="antlib:org.sonatype.aether.ant" xmlns:antcontrib="antlib:net.sf.antcontrib" xmlns:artifact="antlib:org.apache.maven.artifact.ant" basedir=".">

   	<!-- 
   	<property name="mvn.type" value="snapshot" />
   	<property name="mvn.type" value="release" />
    <property name="mvn.repo.dest" value="remote" />
    <property name="mvn.repo.dest" value="local" />
    <property name="mvn.repo.id" value="mvn.repo.${mvn.repo.dest}" />
    <property name="maven.repo.local" location="${pub.dir}/maven2" />
   	-->
    <property name="maven.ant.tasks.jar" value="${cfdistro.basedir}/lib/maven-ant-tasks-2.1.3.jar" />
	<path id="maven.ant.tasks.classpath" path="${maven.ant.tasks.jar}" />
    <available property="maven.ant.tasks.jar.exists" file="${maven.ant.tasks.jar}" />

	<property name="nexus.version" value="2.0.6" />
	<property name="ext.nexus.dir" location="${ext.dir}/nexus/${nexus.version}" />
	<property name="nexus.dir" location="${user.home}/nexus" />
	<property name="nexus.repo.dir" location="${user.home}/nexus/repo" />
	<property name="ext.nexus.war.uri" value="http://www.sonatype.org/downloads/nexus-${nexus.version}.war" />
	<property name="ext.nexus.war" location="${ext.nexus.dir}/nexus-${nexus.version}.war" />
	<property name="nexus.war" location="${nexus.dir}/nexus-${nexus.version}.war" />
	<property name="nexus.context" value="/nexus" />
	<available file="${nexus.war}" property="nexus.isconfigured" />
	
    <!-- This will download the "latest version" of the maven-ant-tasks if needed
    <target name="bootstrap_maven" unless="maven.ant.tasks.jar.exists">
	    <property name="maven.ant.tasks.bootstrap.location" value="https://builds.apache.org/job/maven-ant-tasks/org.apache.maven$maven-ant-tasks/lastSuccessfulBuild/artifact/org.apache.maven/maven-ant-tasks/2.1.4-SNAPSHOT/maven-ant-tasks-2.1.4-SNAPSHOT.jar" />
        <get src="${maven.ant.tasks.bootstrap.location}" dest="${maven.ant.tasks.jar}" />
    </target>
     -->
	<property name="nexus.admin.user" value="${ci.admin.user}" />
	<property name="nexus.admin.password" value="${ci.admin.password}" />
   	<property name="nexus.port" value="8081" />
   	<property name="nexus.host" value="127.0.0.1" />
   	<property name="nexus.baseurl" value="http://${nexus.host}:${nexus.port}/nexus" />
	
	<property name="nexus.background" value="true" />

	<target name="nexus.install">
		<mkdir dir="${ext.nexus.dir}"/>
		<mkdir dir="${nexus.dir}"/>
		<sequential>
			<required-resource
				src="${ext.nexus.war.uri}"
				dest="${ext.nexus.war}"/>
			<unzip src="${ext.nexus.war}" dest="${nexus.war}" />
		</sequential>
	</target>

	<target name="nexus.configure" unless="nexus.isconfigured">
		<mkdir dir="${nexus.dir}"/>
		<sequential>
			<!-- <cfdistro target="cfdistro.dist" properties="dist.dir=${nexus.dir}/workspace/cfdistrojob/" /> -->
			<required-resource
				src="${ext.nexus.war.uri}"
				dest="${ext.nexus.war}"
			/>
			<antcontrib:runtarget target="nexus.install" />
			<sha plaintext="${nexus.admin.password}" property="nexus.admin.password.hash" />
			<echo message="Admin: ${nexus.admin.user} ${nexus.admin.password} (${nexus.admin.password.hash})" />
			<property name="nexus.nonpub.password" value="nonpubpass" />
			<sha plaintext="${nexus.nonpub.password}" property="nexus.nonpub.password.hash" />
			<propertyfile file="${nexus.war}/WEB-INF/plexus.properties">
				<entry  key="nexus-work" value="${nexus.dir}/sonatype-work"/>
				<entry  key="security-xml-file" value="${nexus.dir}/security.xml"/>
			</propertyfile>
			<echo file="${nexus.dir}/security.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><security><version>2.0.5</version>
				  <users>
				    <user>
				      <id>${nexus.admin.user}</id>
				      <firstName>Administrator</firstName>
				      <password>${nexus.admin.password.hash}</password>
				      <status>active</status>
				      <email>changeme@yourcompany.com</email>
				    </user>
				    <user>
				      <id>nonpub</id>
				      <firstName>nonpub</firstName>
				      <password>${nexus.nonpub.password.hash}</password>
				      <status>active</status>
				      <email>noreply@nowhere.com</email>
				    </user>
				    <user>
				      <id>anonymous</id>
				      <firstName>Nexus</firstName>
				      <lastName>Anonymous User</lastName>
				      <password>0a92fab3230134cca6eadd9898325b9b2ae67998</password>
				      <status>active</status>
				      <email>changeme2@yourcompany.com</email>
				    </user>
				  </users>
				  <userRoleMappings>
				    <userRoleMapping>
				      <userId>ci</userId>
				      <source>default</source>
				      <roles>
				        <role>nx-admin</role>
				      </roles>
				    </userRoleMapping>
				    <userRoleMapping>
				      <userId>anonymous</userId>
				      <source>default</source>
				      <roles>
				        <role>anonymous</role>
				      </roles>
				    </userRoleMapping>
				  </userRoleMappings>
				</security>
				]]></echo>

			<unzip src="${nexus.war}/WEB-INF/lib/nexus-oss-edition-2.0.6.jar" dest="${nexus.dir}/sonatype-work/conf/">
			    <patternset>
			        <include name="META-INF/nexus/nexus.xml"/>
			    </patternset>
			    <mapper type="flatten"/>
			</unzip>
			<xmltask source="${nexus.dir}/sonatype-work/conf/nexus.xml" dest="${nexus.dir}/sonatype-work/conf/nexus.xml">
				<cut path="nexusConfiguration/repositories/repository[id[text()='releases']]" buffer="releaseReop" />
				<cut path="nexusConfiguration/repositories/repository[id[text()='snapshots']]" buffer="snapshotReop"/>
				<remove path="nexusConfiguration/repositories/*"/>
				<paste path="nexusConfiguration/repositories" buffer="releaseReop"/>
				<paste path="nexusConfiguration/repositories" buffer="snapshotReop"/>
				<remove path="nexusConfiguration/repositories/repository[id[text()='releases']]/localStorage/*"/>
				<insert path="nexusConfiguration/repositories/repository[id[text()='releases']]" 
					xml="&lt;localStorage&gt;&lt;provider&gt;file&lt;/provider&gt;&lt;url&gt;${nexus.repo.dir}&lt;/url&gt;&lt;/localStorage&gt;" />
				<insert path="nexusConfiguration/restApi"><![CDATA[<baseUrl>${nexus.baseurl}</baseUrl>
				    <forceBaseUrl>true</forceBaseUrl>]]>
				</insert>
			</xmltask>

		</sequential>

	</target>

	<target name="nexus.start" depends="nexus.configure">
		<java jar="${cfdistro.basedir}/lib/runwar.jar" fork="true" spawn="false" maxmemory="${runwar.maxmemory}" failonerror="true">
			<jvmarg line="${server.jvm.args}"/>
			<arg value="-war" /><arg value="${nexus.war}/" />
			<arg value="-context" /><arg value="${nexus.context}" />
			<arg value="-host" /><arg value="${nexus.host}" />
			<arg value="-port" /><arg value="${nexus.port}" />
			<arg value="-stop-port" /><arg value="8992" />
			<arg value="-enable-ajp" /><arg value="false" />
			<arg value="-ajp-port" /><arg value="${server.port.ajp}" />
			<arg value="-log-dir" /><arg value="${nexus.dir}" />
			<arg value="-loglevel" /><arg value="INFO" />
			<arg value="-dirs" /><arg value="${nexus.dir}" />
			<arg value="-background" /><arg value="${nexus.background}" />
			<arg value="-requestlog" /><arg value="false" />
			<arg value="-open-browser" /><arg value="false" />
			<arg value="-open-url" /><arg value="none" />
			<arg value="-osxprocessname" /><arg value="nexus" />
		</java>
	</target>

	<target name="nexus.stop" depends="nexus.configure">
		<java jar="${cfdistro.basedir}/lib/runwar.jar" fork="true" spawn="false" maxmemory="${runwar.maxmemory}" failonerror="true">
			<jvmarg line="${server.jvm.args}"/>
			<arg value="-stop" /><arg value="8992" />
		</java>
	</target>
	
    <!-- This will initialize all the maven ant tasks and download the requested artifact and its dependencies -->
    <target name="get" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
        <path id="maven.ant.tasks.classpath" path="${maven.ant.tasks.jar}" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven.ant.tasks.classpath" />
        <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
            <isset property="maven.repo.local" />
        </condition>
        <echo>maven.repo.local=${maven.repo.local}</echo>
        <artifact:localRepository id="local.repository" path="${maven.repo.local}" />
        <artifact:dependencies pathId="build.classpath" sourcesFilesetId="sources.id">
            <dependency groupId="${mvn.get.groupId}" artifactId="${mvn.get.artifactId}" version="${mvn.get.version}"/>
            <localRepository refid="local.repository" />
        </artifact:dependencies>
    </target>


    <target name="mvn.deploy.jre" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    	<antcontrib:var name="mvn.jre.version" value="1.7.0_15" />
		<!--
		<antcontrib:var name="mvn.jre.version" value="1.6.0_41" />
    	-->
		<property name="mvn.jre.dir" value="${basedir}/../jre" />
		<pom-and-deploy pomid="jre.pom" packaging="pom" buildtype="${mvn.type}"
		 groupId="oracle" artifactId="jre" version="${mvn.jre.version}" name="oracle.jre">
			<attachments>
        		<attach file="${mvn.jre.dir}/win32/jre${mvn.jre.version}.zip" type="zip" classifier="win32"/>
        		<attach file="${mvn.jre.dir}/win64/jre${mvn.jre.version}.zip" type="zip" classifier="win64"/>
        		<attach file="${mvn.jre.dir}/linux32/jre${mvn.jre.version}.zip" type="zip" classifier="linux32"/>
        		<attach file="${mvn.jre.dir}/linux64/jre${mvn.jre.version}.zip" type="zip" classifier="linux64"/>
        		<attach file="${mvn.jre.dir}/darwin64/jre${mvn.jre.version}.zip" type="zip" classifier="darwin64"/>
			</attachments>
		</pom-and-deploy>
		<delete dir="${mvn.jre.tmp}" />
	</target>	

    <target name="pack2zip.jre" xmlns:artifact="antlib:org.apache.maven.artifact.ant" description="convert packed bins to zip">
		<!-- only used to fill repo initially - put exploded JREs in arch subdirs -->
		<property name="mvn.jre.tmp" location="${temp.dir}/jre" />
		<antcontrib:var name="mvn.jre.version" value="1.6.0_41" />
		<!--
    	<antcontrib:var name="mvn.jre.version" value="1.7.0_15" />
    	-->
		<property name="mvn.jre.dir" location="${basedir}/../jre" />
    	<delete dir="${temp.dir}" />
    	<mkdir dir="${temp.dir}" />
		<echo message="*** UNPACKING AND REPACKING LINUX PACKS ***" />    	
    	<antcontrib:for param="file">
			<path><fileset dir="${mvn.jre.dir}" includes="*.bin.sh" /></path>
			<sequential>
				<antcontrib:var name="basename" unset="true" />
				<antcontrib:var name="__locdirr" unset="true" />
				<basename file="@{file}" property="basename" suffix=".bin.sh" />
				<antcontrib:propertyregex global="true" override="yes" 
				 property="basename" input="${basename}" regexp="\." replace="-"/>
				<echo message="${basename}"/>
				<property name="__locdirr" location="${temp.dir}/jre/${basename}" />
				<mkdir dir="${__locdirr}" />
				<exec executable="unzip">
				    <arg value="-qq"/>
				    <arg value="@{file}"/>
				    <arg value="-d"/>
				    <arg value="${__locdirr}"/>
				</exec>
		    	<antcontrib:for param="pack">
					<path><fileset dir="${__locdirr}" includes="**/*.pack" /></path>
					<sequential>
						<antcontrib:propertyregex property="jar" global="true" override="yes" 
						input="@{pack}" regexp="pack" replace="jar"/>
				        <exec executable="${java.home}/bin/unpack200">
				            <arg value="@{pack}"/>
				            <arg value="${jar}"/>
				        </exec>
						<delete file="@{pack}"/>
					</sequential>
		    	</antcontrib:for>
				<delete file="${mvn.jre.dir}/${basename}.zip" />
				<exec executable="/bin/sh">
				    <arg line='-c "cd ${__locdirr}/jre${mvn.jre.version}; zip -9 -qq -r ${mvn.jre.dir}/${basename}.zip *"'/>
				</exec>
			</sequential>
    	</antcontrib:for>
		<echo message="*** UNPACKING AND REPACKING WINDOWS PACKS ***" />    	
    	<antcontrib:for param="file">
			<path><fileset dir="${mvn.jre.dir}" includes="*.exe" /></path>
			<sequential>
				<antcontrib:var name="basename" unset="true" />
				<basename file="@{file}" property="basename" suffix=".exe" />
				<antcontrib:propertyregex property="basename" global="true" override="yes" 
				input="${basename}" regexp="\." replace="-"/>
				<echo message="${basename}"/>
				<exec executable="7z">
				    <arg value="x"/><arg value="-y"/>
				    <arg value="-o${temp.dir}/jre/${basename}"/>
				    <arg value="@{file}"/><arg value="core.zip"/>
				</exec>
				<unzip src="${temp.dir}/jre/${basename}/core.zip" dest="${temp.dir}/jre/${basename}/core" />
		    	<antcontrib:for param="pack">
					<path><fileset dir="${temp.dir}/jre/${basename}/core/lib" includes="**/*.pack" /></path>
					<sequential>
						<antcontrib:propertyregex property="jar" global="true" override="yes" 
						input="@{pack}" regexp="pack" replace="jar"/>
				        <exec executable="${java.home}/bin/unpack200">
				            <arg value="@{pack}"/>
				            <arg value="${jar}"/>
				        </exec>
						<delete file="@{pack}"/>
					</sequential>
		    	</antcontrib:for>
				<delete file="${mvn.jre.dir}/${basename}.zip" />
				<zip destfile="${mvn.jre.dir}/${basename}.zip" level="9" update="false">
					<fileset dir="${temp.dir}/jre/${basename}/core/" /> 
				</zip>
			</sequential>
    	</antcontrib:for>    	
    	<delete dir="${temp.dir}" />
	</target>	
		
    <target name="jre.7.update" xmlns:artifact="antlib:org.apache.maven.artifact.ant" description="convert packed bins to zip">
        <property name="mvn.repo.id" value="cfdistro.repo.local" />
		<property name="mvn.jre.tmp" location="${temp.dir}/jre" />
		<property name="mvn.jre.dir" location="${basedir}/../jre" />
		<property name="jre.prefix" value="jre-7u21" />
		<property name="jre.baseurl" value="http://download.oracle.com/otn-pub/java/jdk/7u21" />

    	<antcontrib:propertyregex property="jre.version" global="true" override="yes" 
			input="${jre.prefix}" regexp="jre-(\d)u(\d+)" replace="1.\1.0_\2"/>
    	<input message="Do you agree to the ${jre.version} license?" addproperty="jre.lic.agree" />
    	<delete dir="${temp.dir}" />
    	<mkdir dir="${temp.dir}" />
    	<mkdir dir="${mvn.jre.tmp}" />
		<echo message="*** GETTING JRE ${jre.version} ***" />    	
    	<antcontrib:for list="linux-i586:b11,linux-x64:b11,macosx-x64:b12,windows-i586:b11,windows-x64:b11" param="file">
			<sequential>
				<antcontrib:propertyregex property="jre.os" override="yes" 
					input="@{file}" regexp="([^:]*)" select="\1"/>
				<antcontrib:propertyregex property="jre.b.version" override="yes" 
					input="@{file}" regexp=".*:(.*)" select="\1"/>
				<echo message="*** GETTING JRE : ${jre.version} ${jre.prefix}-${jre.os} ${jre.b.version}***" />
				<exec executable="wget" failonerror="true">
					<arg value="--no-check-certificate"/>
				    <arg line='--header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F"'/>
				    <arg value="-O"/>
				    <arg value="${mvn.jre.tmp}/${jre.prefix}-${jre.os}.tar.gz"/>
				    <arg value="${jre.baseurl}-${jre.b.version}/${jre.prefix}-${jre.os}.tar.gz"/>
				</exec>
				<gunzip src="${mvn.jre.tmp}/${jre.prefix}-${jre.os}.tar.gz" dest="${mvn.jre.tmp}/${jre.prefix}-${jre.os}.tar"/>
				<untar src="${mvn.jre.tmp}/${jre.prefix}-${jre.os}.tar" dest="${mvn.jre.tmp}/${jre.os}"/>
				<antcontrib:if>
		    		<available file="${mvn.jre.tmp}/${jre.os}/jre${jre.version}.jre/Contents/Home/" />
		    		<then><!-- OS X -->
						<move todir="${mvn.jre.tmp}/${jre.os}/jre${jre.version}">
						  <fileset dir="${mvn.jre.tmp}/${jre.os}/jre${jre.version}.jre/Contents">
						    <include name="*/**"/>
						    <exclude name="*"/>
						  </fileset>
						  <regexpmapper from="^[^/]*/(.*)$$" to="\1" handledirsep="true"/>
						</move>
		    	    	<delete dir="${mvn.jre.tmp}/${jre.os}/jre${jre.version}.jre" />
		    		</then>
		    	</antcontrib:if>
		    	<antcontrib:if>
		    		<available file="${mvn.jre.tmp}/${jre.os}/jre${jre.version}/bin" />
		    		<then>
						<chmod dir="${mvn.jre.tmp}/${jre.os}/jre${jre.version}/bin" perm="+x" includes="*"/>
		    		</then>
		    	</antcontrib:if>
	    		<zipdir destfile="${mvn.jre.tmp}/jre${jre.version}-${jre.os}.zip" sourcedir="${mvn.jre.tmp}/${jre.os}/jre${jre.version}/" />
			</sequential>
    	</antcontrib:for>
    	<echo message="*** POMN ***" />    	
		<pom-and-deploy pomid="jre.pom" packaging="pom" buildtype="${mvn.type}"
		 groupId="oracle" artifactId="jre" version="${jre.version}" name="oracle.jre">
			<attachments>
        		<attach file="${mvn.jre.tmp}/jre${jre.version}-linux-i586.zip" type="zip" classifier="linux32"/>
        		<attach file="${mvn.jre.tmp}/jre${jre.version}-linux-x64.zip" type="zip" classifier="linux64"/>
        		<attach file="${mvn.jre.tmp}/jre${jre.version}-macosx-x64.zip" type="zip" classifier="darwin64"/>
        		<attach file="${mvn.jre.tmp}/jre${jre.version}-windows-i586.zip" type="zip" classifier="win32"/>
        		<attach file="${mvn.jre.tmp}/jre${jre.version}-windows-x64.zip" type="zip" classifier="win64"/>
			</attachments>
		</pom-and-deploy>
    	<delete dir="${temp.dir}" />
	</target>	
		
	
	<macrodef name="mvn-repo">
		<attribute name="id" />
		<attribute name="url"/>
		<element name="authentication" optional="true" />
		<element name="enablement" optional="true" />
		<sequential>
			<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
				uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.ant.tasks.classpath" />
		    <artifact:remoteRepository id="@{id}" url="@{url}">
		      	<authentication />
		      	<enablement />
		    </artifact:remoteRepository>
		</sequential>
	</macrodef>


	<macrodef name="mvn-get" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
		<attribute name="groupId" />
		<attribute name="artifactId"/>
		<attribute name="version"/>
		<attribute name="classifier" default=""/>
		<attribute name="type" default="zip"/>
		<attribute name="toFile" default=""/>
		<sequential>
			<echo message="@{groupId}:@{artifactId}:@{version}:@{classifier}:@{type}"/>
	        <path id="maven.ant.tasks.classpath" path="${maven.ant.tasks.jar}" />
	        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven.ant.tasks.classpath" />
	        <artifact:dependencies>
	            <dependency groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" classifier="@{classifier}" type="@{type}"/>
	            <localRepository path="${cfdistro.repo.local.path}" />
	            <remoteRepository refid="cfdistro.repo.local" />
	            <remoteRepository refid="cfdistro.repo.remote" />
	        </artifact:dependencies>
	        <antcontrib:if>
	        	<equals arg1="@{toFile}" arg2="" />
	        	<then/><else>
					<antcontrib:propertyregex 
					property="dependency.location" 
					input="@{groupId}/@{artifactId}" 
					global="true" override="yes" 
					regexp="\." 
					replace="/" />
					<copy tofile="@{toFile}" file="${cfdistro.repo.local.path}/${dependency.location}/@{version}/@{artifactId}-@{version}.@{type}" />
	        	</else>
	        </antcontrib:if>
		</sequential>
	</macrodef>
	
	<macrodef name="mvn-get-deps" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
		<attribute name="todir" />
		<attribute name="scope" default="runtime" />
		<attribute name="pomfile" default="" />
		<element name="deps" implicit="true" optional="true"/>
		<sequential>
	        <path id="maven.ant.tasks.classpath" path="${maven.ant.tasks.jar}" />
	        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven.ant.tasks.classpath" />
	        <antcontrib:var unset="true" name="_dependency.fileset" />
			<antcontrib:if>
				<equals arg1="@{pomfile}" arg2="" />
				<then>
					<artifact:dependencies filesetId="_dependency.fileset" useScope="@{scope}">
			            <deps />
			            <localRepository path="${cfdistro.repo.local.path}" />
			            <remoteRepository refid="cfdistro.repo.local" />
			            <remoteRepository refid="cfdistro.repo.remote" />
			        </artifact:dependencies>
				</then>
				<else>
					<artifact:dependencies filesetId="_dependency.fileset" useScope="@{scope}">
						<pom file="@{pomfile}"/>
			            <localRepository path="${cfdistro.repo.local.path}" />
			            <remoteRepository refid="cfdistro.repo.local" />
			            <remoteRepository refid="cfdistro.repo.remote" />
			        </artifact:dependencies>
				</else>
			</antcontrib:if>
			<copy todir="@{todir}">
			  <fileset refid="_dependency.fileset" />
			  <mapper type="flatten" />
			</copy>
		</sequential>
	</macrodef>
	
	<macrodef name="dependency">
		<attribute name="groupId" />
		<attribute name="artifactId"/>
		<attribute name="version"/>
		<attribute name="classifier" default=""/>
		<attribute name="type" default="zip"/>
		<attribute name="mapping" default=""/>
		<attribute name="dest" default=""/>
		<attribute name="unzip" default="true"/>
		<attribute name="isExtension" default="false"/>
		<sequential>
			<property name="ext.mappings.dir" value="${ext.dir}/mappings" />
			<antcontrib:propertyregex 
			property="dependency.location" 
			input="@{groupId}" 
			global="true" override="yes" 
			regexp="\." 
			replace="/" />
			<antcontrib:if>
				<equals arg1="@{classifier}" arg2="" />
				<then>
					<antcontrib:var name="_dep.classifier" value=""/>
				</then>
				<else>
					<antcontrib:var name="_dep.classifier" value="-@{classifier}"/>
				</else>
			</antcontrib:if>
			<antcontrib:var name="_dep.loc" value="${cfdistro.repo.local.path}/${dependency.location}/@{artifactId}/@{version}/"/>
			<antcontrib:var name="_dep.file" value="${cfdistro.repo.local.path}/${dependency.location}/@{artifactId}/@{version}/@{artifactId}-@{version}${_dep.classifier}.@{type}"/>
			<mvn-get groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" type="@{type}" classifier="@{classifier}" />
			<antcontrib:if>
				<equals arg1="@{dest}" arg2="" /><then/>
				<else>
					<antcontrib:if>
						<equals arg1="true" arg2="@{unzip}" />
						<then>
							<unzip src="${_dep.file}" dest="@{dest}"/>
						</then>
						<else>
							<copy file="${_dep.file}" todir="@{dest}"/>
						</else>
					</antcontrib:if>
				</else>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="@{mapping}" arg2="" />
				<then/>
				<else>
					<antcontrib:if>
						<equals arg1="@{dest}" arg2="" />
						<then>
							<antcontrib:var name="ext.mapping.dir" value="${ext.mappings.dir}/@{groupId}/@{artifactId}/@{version}" />
							<antcontrib:var name="physicalxml" value="@ext.mappings.dir@/@{groupId}/@{artifactId}/@{version}@{mapping}" />
						</then>
						<else>
							<antcontrib:var name="ext.mapping.dir" value="@{dest}" />
							<antcontrib:var name="physicalxml" value="@{dest}" />
						</else>
					</antcontrib:if>
					<antcontrib:if>
						<available file="${ext.mapping.dir}"/><then/>
						<else>
							<unzip src="${_dep.file}" dest="${ext.mapping.dir}"/>
						</else>
					</antcontrib:if>
					<!-- physicalxml is what goes in the mappings.xml file. a token vs. the fixed path. -->
					<mapping physical="${ext.mapping.dir}@{mapping}" physicalxml="${physicalxml}" virtual="@{mapping}"/>
				</else>
			</antcontrib:if>
			<antcontrib:if>
				<equals arg1="${isExtension}" arg2="true" />
				<then>
					<railo-extension-install extension-zip="${_dep.file}" />
				</then>
			</antcontrib:if>
		</sequential>
	</macrodef>

	<macrodef name="mvn-put" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
		<attribute name="artifact"/>
		<attribute name="groupId" />
		<attribute name="artifactId"/>
		<attribute name="version"/>
		<attribute name="packaging" default="jar" />
		<attribute name="repoId" default="${mvn.repo.id}" />
		<sequential>
		<property name="mvn.type" value="release"/>
		<antcontrib:if>
			<isset property="wagon-ssh.installed" />
			<then/>
			<else>
				<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
				<property name="wagon-ssh.installed" value="true"/>
			</else>
		</antcontrib:if>
		<pom-and-deploy pomid="cfdistro.put.pom" artifact="@{artifact}" packaging="@{packaging}" buildtype="${mvn.type}"
		 groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" repoId="@{repoId}"/>
		</sequential>
	</macrodef>	
	
	<macrodef name="pom-and-deploy">
		<attribute name="pomid" />
		<attribute name="buildtype" default="release" />
		<attribute name="artifact" default="" />
		<attribute name="file" default="" />
		<attribute name="groupId" default="" />
		<attribute name="artifactId" default="" />
		<attribute name="version" default="" />
		<attribute name="name" default="" />
		<attribute name="packaging" default="jar" />
		<attribute name="repoId" default="${mvn.repo.id}" />
		<element name="dependencies" optional="true" />
		<element name="attachments" optional="true" />
		 <!-- <attach file="${basedir}/target/my-project-1.0-sources.jar" type="jar" classifier="sources"/> -->
		<sequential>
			<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
				uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.ant.tasks.classpath" />
			<!-- <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/> -->
    		<echoproperties prefix="repository." />
			<antcontrib:if>
				<equals arg1="@{buildtype}" arg2="snapshot" />
				<then>
    				<property name="__buildtype.suffix" value="-SNAPSHOT" /> 
				</then>
			</antcontrib:if>
    		<property name="__buildtype.suffix" value="" /> 
			<antcontrib:if>
				<equals arg1="@{file}" arg2="" />
				<then>
					<artifact:pom id="@{pomid}_tmp" groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}${__buildtype.suffix}" name="@{name}" packaging="@{packaging}">
			        	<dependencies />
					</artifact:pom>
					<bug170workaround pomid="@{pomid}" />
				</then>
				<else>
					<artifact:pom id="@{pomid}" file="@{file}">
			        	<dependencies />
					</artifact:pom>
				</else>
			</antcontrib:if>

			<antcontrib:if>
				<equals arg1="@{artifact}" arg2="" />
				<then>
					<artifact:deploy>
					  <remoteRepository refid="@{repoId}" />
					  <!-- <localRepository path="${cfdistro.repo.local.path}" /> -->
			          <attachments />
					  <pom refid="@{pomid}"/>
					</artifact:deploy>
				</then>
				<else>
				<!-- 
					<artifact:mvn>
						<localRepository path="/tmp/farter" />
						<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
						<arg value="-Durl=${maven-snapshots-repository-url}" />
						<arg value="-DrepositoryId=${mvn.repo.id}" />
						<arg value="-DpomFile=@{pomid}" />
						<arg value="-Dfile=@{artifact}" />
					</artifact:mvn>
				 -->
					<artifact:deploy file="@{artifact}">
					  <remoteRepository refid="@{repoId}" />
					  <!-- <localRepository path="${cfdistro.repo.local.path}" /> -->
			          <attachments />
					  <pom refid="@{pomid}"/>
					</artifact:deploy>
				</else>
			</antcontrib:if>
		</sequential>
	</macrodef>
		
	<macrodef name="bug170workaround">
		<attribute name="pomid" />
		<attribute name="dir" default="/tmp" />
		<sequential>
			<artifact:writepom pomrefid="@{pomid}_tmp" file="@{dir}/tmppom.xml" trim="true"/>
			<artifact:pom id="@{pomid}" file="@{dir}/tmppom.xml" />
		</sequential>
	</macrodef>

	<macrodef name="pom-info">
		<attribute name="pomfile" />
		<attribute name="pomid" />
		<sequential>
			<artifact:pom id="@{pomid}" file="@{pomfile}" />
		</sequential>
	</macrodef>

	<property name="cfmlprojects.repo.user" value="admin" />
   	<property name="cfmlprojects.repo.password" value="admin123" />
    <mvn-repo id="cfmlprojects.repo" url="http://cfmlprojects.org/artifacts">
    	<authentication>
    		<authentication username="${cfmlprojects.repo.user}" password="${cfmlprojects.repo.password}"/>
		</authentication>
    </mvn-repo>

	
	
</project>
