<project name="revisions" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<propertyset id="sc-properties">
	  <propertyref prefix="sc.${sc}."/>
	</propertyset>
	<antcontrib:for list="${toString:sc-properties}" param="prop">
		<sequential>
			<antcontrib:propertyregex property="scprop"
			              input="@{prop}"
			              regexp="sc\..+?\.(.*)="
			              select="sc.\1"
			              casesensitive="false" override="true" />
			<antcontrib:propertyregex property="scpropval"
			              input="@{prop}"
			              regexp=".+?=(.*)"
			              select="\1"
			              casesensitive="false" override="true" />
			<echo message="${scprop} is ${scpropval} "/>
			<antcontrib:var name="${scprop}" value="${scpropval}"/>
		</sequential>
	</antcontrib:for>

	
	<property name="basedir.absolute" location="${basedir}" />
	<property name="src.xml.file" value="${basedir.absolute}/src.xml" />
	<import file="scm-git.xml"/>
	<import file="scm-svn.xml"/>
	<import file="scm-cvs.xml"/>
	
	<macrodef name="apply-patch">
		<attribute name="patchUrl"/>
		<attribute name="patchlevel" default="0" />
		<attribute name="patchdir" default="${src.dir}" />
		<sequential>
			<delete file="${temp.dir.absolute}/patch.txt"/>
			<get src="@{patchUrl}" dest="${temp.dir.absolute}/patch.txt" verbose="true" ignoreerrors="false" />
			<patch patchfile="${temp.dir.absolute}/patch.txt" strip="@{patchlevel}" dir="@{patchdir}"/>
			<echo message="Patch results: ${patch.results}"/>
		</sequential>
	</macrodef>

	<macrodef name="load-src-xml">
		<sequential>
			<antcontrib:if>
				<available file="${src.xml.file}" type="file" property="exists.src.xml"/>
				<then>
					<tempfile property="temp.all.props.file" prefix="props"/>
					<echoproperties destfile="${temp.all.props.file}"/>
					<loadfile property="src.xml" srcFile="${src.xml.file}">
						<filterchain>
							<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
								<param type="token" name="src.dir" value="${src.dir}"/>
								<param type="token" name="ext.mappings.dir" value="${ext.mappings.dir}"/>
								<param type="token" name="pub.dir" value="${pub.dir}"/>
								<param type="token" name="lib.dir" value="${lib.dir}"/>
								<param type="token" name="distro.name" value="${distro.name}"/>
								<param type="token" name="war.name" value="${war.name}"/>
								<param type="token" name="war.target.dir" value="${war.target.dir}"/>
								<param type="propertiesfile" value="${temp.all.props.file}" />
							</filterreader>
						</filterchain>
					</loadfile>
					<delete file="${temp.all.props.file}"/>
					<xmltask destbuffer="src.buff" outputter="simple">
						<insert path="/" xml="${src.xml}" position="under" />
					</xmltask>
					<src-init />
				</then>
				<else />
			</antcontrib:if>
		</sequential>
	</macrodef>

	<macrodef name="scm-export">
		<attribute name="dest" />
		<attribute name="type" />
		<attribute name="uri" />
		<attribute name="path" default="" />
		<attribute name="tag" default="HEAD" />
		<attribute name="user" default="" />
		<attribute name="password" default="" />
		<sequential>
			<antcontrib:switch value="@{type}">
				<case value="git">
					<git-export repository="@{uri}" dest="@{dest}" path="@{path}" tag="@{tag}"/>
				</case>
				<case value="svn">
					<svn-export uri="@{uri}" dest="@{dest}" />
				</case>
			</antcontrib:switch>
		</sequential>
	</macrodef>

	<macrodef name="scm-checkout">
		<attribute name="dest" />
		<attribute name="type" />
		<attribute name="uri" />
		<attribute name="path" default="" />
		<attribute name="tag" default="HEAD" />
		<attribute name="branch" default="" />
		<attribute name="user" default="" />
		<attribute name="password" default="" />
		<sequential>
			<antcontrib:switch value="@{type}">
				<case value="git">
					<git-checkout uri="@{uri}" repository="@{dest}" branch="@{branch}"/>
				</case>
				<case value="svn">
					<svn-checkout uri="@{uri}" dest="@{dest}" user="@{user}" password="@{password}"/>
				</case>
			</antcontrib:switch>
		</sequential>
	</macrodef>


	<target name="exists.src.xml" unless="exists.src.xml">
		<available file="${src.xml.file}" type="file"
		           property="exists.src.xml"/>
		<antcontrib:if>
			<equals arg1="${exists.src.xml}" arg2="true" />
			<then>
				<echo message="src file exists : ${src.xml.file} " />
				<load-src-xml />
			</then>
			<else>
				<echo message="No src file to import : ${src.xml.file} does not exist." />
			</else>
		</antcontrib:if>
		<property name="src.dir.absolute" location="${src.dir}" />
		<antcontrib:var name="src.dir" unset="true" />
		<property name="src.dir" location="${src.dir.absolute}" />
	</target>

	<macrodef name="src-init">
		<sequential>
		<xmltask sourcebuffer="src.buff">
			<call path="src/project/*">
				<param name="dest" path="@dest" default="NONE" />
				<param name="type" path="@type" default="NONE" />
				<param name="uri" path="@uri" default="NONE" />
				<param name="path" path="@path" default="" />
				<param name="branch" path="@branch" default="" />
				<param name="tag" path="@tag" default="HEAD" />
				<param name="user" path="@user" default="" />
				<param name="password" path="@password" default="" />
				<actions>
					<antcontrib:if>
						<available file="@{dest}" />
						<then>
							<echo message="Src dir : @{dest} exists " />
						</then>
						<else>
							<echo message="Src dir : @{dest} ain't there, downloading" />
							<scm-checkout dest="@{dest}" type="@{type}" uri="@{uri}" branch="@{branch}" path="@{path}" tag="@{tag}" user="@{user}" password="@{password}" />
						</else>
					</antcontrib:if>
				</actions>
			</call>
			<call path="src/sources/*">
				<param name="dest" path="@dest" default="NONE" />
				<param name="type" path="@type" default="NONE" />
				<param name="uri" path="@uri" default="NONE" />
				<param name="path" path="@path" default="" />
				<param name="tag" path="@tag" default="HEAD" />
				<param name="user" path="@user" default="" />
				<param name="password" path="@password" default="" />
				<actions>
					<antcontrib:if>
						<available file="@{dest}" />
						<then>
							<echo message="Src dir : @{dest} exists " />
						</then>
						<else>
							<echo message="Src dir : @{dest} ain't there, downloading" />
							<scm-export dest="@{dest}" type="@{type}" uri="@{uri}" path="@{path}" tag="@{tag}" user="@{user}" password="@{password}" />
						</else>
					</antcontrib:if>
				</actions>
			</call>
		</xmltask>
		</sequential>
	</macrodef>

	<target name="src.import" depends="exists.src.xml" if="exists.src.xml">
		<antcontrib:runtarget target="src.import.svn" />
		<antcontrib:runtarget target="src.import.git" />
		<antcontrib:runtarget target="src.import.cvs" />
	</target>

	<target name="check.project.for.newrevision" depends="get.project.src.type" unless="revisions.are.same" if="exists.src.xml">
		<antcontrib:if>
			<available file="${project.src.dest}.${project.src.type}" type="dir"/>
			<then>
				<antcontrib:runtarget target="check.project.for.newrevision.${project.src.type}" />
			</then>
			<else>
				<echo message="Not there: ${project.src.dest}/.${project.src.type}" />
			</else>
		</antcontrib:if>
	</target>

	<target name="project.build.ifnew">
		<mkdir dir="${war.target.dir}" />
		<property name="testresult.file" value="${war.target.dir}/test.results.html/" />
		<sequential>
			<antcontrib:runtarget target="project.update" />
			<antcontrib:if>
				<equals arg1="${revisions.are.same}" arg2="true" />
				<then>
					<echo message="Revisions are the same, not building" />
				</then>
				<else>
					<echo message="Revisions differ, running build" />
					<sequential>
						<antcontrib:runtarget target="build" />
					</sequential>
				</else>
			</antcontrib:if>
		</sequential>
	</target>

	<target name="exit.1.if.unchanged">
		<mkdir dir="${war.target.dir}" />
		<property name="testresult.file" value="${war.target.dir}/test.results.html/" />
		<sequential>
			<antcontrib:runtarget target="project.update" />
			<antcontrib:if>
				<or>
					<equals arg1="${revisions.are.same}" arg2="false" />
					<equals arg1="${revisions.remote.differ}" arg2="true" />
				</or>
				<then>
					<echo message="Revisions differ, exiting with status 0." />
					<fail message="&lt;cause&gt;SCM change&lt;/cause&gt; &lt;description&gt;SCM change: Revisions differ&lt;/description&gt;" status="0"/>
				</then>
				<else>
					<echo message="Revisions are the same, not building" />
					<fail message="Revisions are the same, unchanged.  Exiting with status 1." status="1"/>
				</else>
			</antcontrib:if>
		</sequential>
	</target>	
	
	<target name="project.update" depends="check.project.for.newrevision" if="exists.src.xml">
		<echo message="${exists.src.xml}" />
		<antcontrib:runtarget target="project.update.${project.src.type}" />
	</target>

	<target name="project.checkout" depends="get.project.src.type" if="exists.src.xml">
		<antcontrib:runtarget target="project.checkout.${project.src.type}" />
	</target>

	<target name="get.project.src.type" depends="exists.src.xml" if="exists.src.xml">
		<xmltask sourcebuffer="src.buff">
			<call path="src/project/*">
				<param name="dest" path="@dest" default="NONE"/>
				<param name="type" path="@type" default="NONE"/>
				<param name="uri" path="@uri" default="NONE"/>
				<actions>
					<property name="project.src.type" value="@{type}" />
					<property name="project.src.dest" value="@{dest}" />
					<echo message="Project src type : ${project.src.type} dest: @{dest}"/>
				</actions>
			</call>
		</xmltask>
	</target>

	<antcontrib:if>
		<equals arg1="${scm.branch}" arg2="$${scm.branch}" />
		<then/>
		<else>
			<antcontrib:trycatch property="_erredesse">
				<try>
					<property name="scm.dir" value="${src.dir}" />
					<git-fetch-from-remote />
					<!-- use the system git as jgit has trouble with conflicts --> 
					<git command="checkout" dir="${scm.dir}" use-jgit="false">
						<args>
							<arg value="-f" />
							<arg value="origin/${scm.branch}" />
						</args>
					</git>
				</try>
				<catch>
					<echo message="could not check out origin/${scm.branch} for ${scm.dir} (${_erredesse})"/>
				</catch>
			</antcontrib:trycatch>
		</else>
	</antcontrib:if>

    <macrodef name="sc-persist">
		<attribute name="dest" />
		<attribute name="type" />
		<attribute name="uri" />
		<attribute name="branch" default="" />
		<attribute name="user" default="" />
		<attribute name="password" default="" />
		<attribute name="path" default="" />
        <sequential>
			<xmltask source="${basedir}/src.xml" dest="${basedir}/src.xml">
				<copy path="src/project/src[@dest='@{dest}']/@dest" attrValue="true" property="sc.exists" />
				<replace path="src/project/src[@dest='@{dest}']/text()" if="sc.exists">
					<![CDATA[
					<src uri="@{uri}" dest="@{dest}" type="@{type}" 
					user="@{user}" password="@{password}" />
  					]]>
					</replace>
				<insert path="src/project" position="under" unless="sc.exists">
					<![CDATA[
					<src uri="@{uri}" dest="@{dest}" type="@{type}" 
					user="@{user}" password="@{password}" />
  					]]>
					</insert>
			</xmltask>
    	</sequential>
	</macrodef>
	
	<antcontrib:if>
		<equals arg1="${sc}" arg2="$${sc}" />
		<then/>
		<else>
			<fail message="undefined!  sc.uri ${sc.type}" unless="sc.type" />
			<fail message="undefined!  sc.uri ${sc.uri}" unless="sc.uri" />
			<fail message="undefined!  sc.dest ${sc.dest}" unless="sc.dest" />
			<sc-persist 
				dest="${sc.dest}" type="${sc.type}" uri="${sc.uri}"
				branch="${sc.branch}" user="${sc.user}" password="${sc.password}" />
		</else>
	</antcontrib:if>
	
</project>