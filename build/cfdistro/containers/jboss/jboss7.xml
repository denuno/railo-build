<project name="jboss7" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">
	
	<dirname property="jboss7.basedir" file="${ant.file.jboss7}" />
	
	<antcontrib:if>
		<equals arg1="1" arg2="1" />
		<then>
			<path id="jboss.ant.lib.path">
				<fileset dir="${cfdistro.basedir}/ext/containers/jboss/lib">
					<include name="*.jar" />
				</fileset>
			</path>
		</then>
	</antcontrib:if>

	<macrodef name="jboss.init.props">
	    <sequential>
			<load-properties-if-not-defined file="${jboss7.basedir}/jboss7.properties"/>
			<abspath path="${jboss.dir}" property="jboss.dir"/>
			<abspath path="${jboss.server.dir}" property="jboss.server.dir"/>
			<abspath path="${jboss.deploy.dir}" property="jboss.deploy.dir"/>
			<abspath path="${jboss.config.file}" property="jboss.config.file"/>
	    	<antcontrib:var name="jboss.deploy.dir.rel" unset="true" />
			<relpath from="${jboss.server.dir}" to="${jboss.deploy.dir}" property="jboss.deploy.dir.rel"/>
			<echo message="Relative deploy dir ${jboss.server.dir}: ${jboss.deploy.dir} = ${jboss.deploy.dir.rel}" />
	    </sequential>
	</macrodef>

	<target name="jboss.uninstall" depends="jboss.stop">
		<delete dir="${jboss.dir}" />
	</target>

	<target name="jboss.server.log.dir">
		<property name="server.log.dir" value="${jboss.server.log.dir}"/>
	</target>

	<target name="jboss.install">
		<jboss.init.props />
		<mkdir dir="${ext.jboss.dir}"/>
		<sequential>
		<antcontrib:if>
			<available file="${jboss.dir}" />
			<then>
			<echo message="server dir ${jboss.dir} already exists, not installing!  Remove with: ant server.uninstall"/> 
			</then>
			<else>
				<required-resource
					src="${ext.jboss.zip.uri}" 
					dest="${ext.jboss.zip}" />
				<unzip src="${ext.jboss.zip}"						
				       dest="${jboss.dir}">
					<regexpmapper from="jboss-as-${jboss.version}/(.*)$" to="\1"/>
				</unzip>
			</else>
		</antcontrib:if>
		<chmod dir="${jboss.dir}/bin" perm="ugo+rx" includes="**/*.sh"/>
		</sequential>
	</target>

	<target name="jboss.configure">
		<jboss.init.props />
		<!-- 
		<echo message="export JAVA_OPTS=-Xms256m -Xmx${server.maxmemory} -XX:MaxPermSize=128m -XX:+UseParallelGC"
			file="${jboss.dir}/bin/setenv.sh"/>
		<chmod dir="${jboss.dir}/bin" perm="ugo+rx" 
		       includes="**/*.sh"/>
		/jboss5.1.0.GA/server/default/conf/props/jmx-console-users.properties
		-->
		<property name="war.target.dir.absolute" location="${war.target.dir}" />
		<property name="jboss.port.offset" value="0"/>
		<property name="jboss.native-interface" value="9999"/>
		<property name="jboss.http-interface" value="9990"/>
		<property name="jboss.messaging-throughput" value="5455"/>
		<property name="jboss.messaging" value="5445"/>
		
		<antcontrib:var name="jboss.host.exists" unset="true"/>
		<echo message="configuring host (${jboss.host}) if not there already, and setting ports (http: ${jboss.port.http})" />
		<xmltask source="${jboss.config.file}" dest="${jboss.config.file}">
			<attr path="//*[name() = 'server']/*[name()='profile']/*[name()='subsystem']/*[name()='virtual-server'][@name='default-host']" attr="enable-welcome-root" value="false" />
			<attr path="//:server/:socket-binding-group" attr="port-offset" value="${jboss.port.offset}" />
			<attr path="//:server/:management-interfaces/:native-interface" attr="port" value="${jboss.native-interface}" />
			<attr path="//:server/:management-interfaces/:http-interface" attr="port" value="${jboss.http-interface}" />
			<replace path="//:server/:socket-binding-group/:socket-binding[@name='messaging-throughput']/@port" withText="${jboss.messaging-throughput}"/>
			<replace path="//:server/:socket-binding-group/:socket-binding[@name='messaging']/@port" withText="${jboss.messaging}"/>
			<replace path="//:server/:socket-binding-group[@name='http']/@port" withText="${jboss.port.http}"/>
			<replace path="//:server/:socket-binding-group/:socket-binding[@name='http']/@port" withText="${jboss.port.http}"/>
			<replace path="//:server/:socket-binding-group/:socket-binding[@name='ajp']/@port" withText="${jboss.port.ajp}"/>
			
			<copy path="//*[name() = 'server']/*[name()='profile']/*[name()='subsystem']/*[name()='virtual-server'][@name='${jboss.host}']/@name" attrValue="true" property="jboss.host.exists"/>
			<insert path="//*[local-name()='connector'][@name='http']" position="after" unless="jboss.host.exists">
			<![CDATA[
	            <virtual-server name="${jboss.host}" xmlns="urn:jboss:domain:web:1.1" />
			]]>
			</insert>

			<copy path="//*[local-name()='connector'][@name='ajp']/@name" attrValue="true" property="ajp.connector.exists"/>
			<insert path="//*[local-name()='connector'][@name='http']" position="after" unless="ajp.connector.exists">
			<![CDATA[
	            <connector name="ajp" protocol="AJP/1.3" scheme="http" socket-binding="ajp" xmlns="urn:jboss:domain:web:1.1" />
			]]>
			</insert>
			<!-- 
			-->
		</xmltask>
		<echo message="configuring interface (${server.ip})" />
		<xmltask source="${jboss.config.file}" dest="${jboss.config.file}">
			<replace path="//:server/:interfaces/:interface/:inet-address[@value='$${jboss.bind.address:127.0.0.1}']/@value" withText="$${jboss.bind.address:${server.ip}}"/>
		</xmltask>
		<echo message="adding the deploy dir if not there already: ${jboss.deploy.dir.rel}" />
		<xmltask source="${jboss.config.file}" dest="${jboss.config.file}">
			<replace path="//*[local-name()='deployment-scanner']">
	<![CDATA[<deployment-scanner scan-interval="5000" path="${jboss.deploy.dir.rel}" relative-to="jboss.server.base.dir" auto-deploy-exploded="false" xmlns="urn:jboss:domain:deployment-scanner:1.1" />]]>
			</replace>
		</xmltask>
<!--
		<echo message="add the deploy dir to VFS (bad zip deal) if not there already" />
		<xmltask source="${jboss.server.dir}/conf/bootstrap/vfs.xml" dest="${jboss.server.dir}/conf/bootstrap/vfs.xml">
			<copy path="//:property[@name='permanentRoots']/:map/:entry/:key[text()='file://${jboss.deploy.dir.rel}']/text()" attrValue="true" property="jboss.vfsuri.exists"/>
			<insert path="//:property[@name='permanentRoots']/:map" position="under" unless="jboss.vfsuri.exists">
			<![CDATA[
		        <entry xmlns="urn:jboss:bean-deployer:2.0">
		          <key>file://${jboss.deploy.dir.rel}</key>
		          <value><inject bean="VfsNamesExceptionHandler"/></value>
		        </entry>
			]]>
			</insert>
		</xmltask>
		-->
		<loadfile property="jboss.standalone.sh.content" srcFile="${jboss.standalone.sh}" />
		<antcontrib:propertyregex property="jboss.standalone.sh.content" input="${jboss.standalone.sh.content}" global="true" override="yes" 
			regexp="(.*/standalone/log/boot.log)(\s-Djava.net.preferIPv4Stack=true\s)?(.*)" replace="\1 -Djava.net.preferIPv4Stack=true \3" />
		<echo file="${jboss.standalone.sh}" message="${jboss.standalone.sh.content}" />
		<antcontrib:if>
			<equals arg1="${war.contextpath}" arg2="/" />
			<then>
				<delete dir="${jboss.server.dir}/deploy/ROOT.war"/>
			</then>
		</antcontrib:if>
		<chmod dir="${jboss.dir}/bin" perm="ugo+rx" includes="**/*.sh"/>
	</target>

	<target name="jboss.start" depends="jboss.install">
		<echoproperties prefix="jboss"/>
		<echo message="starting jboss"/>
		<property name="background" value="true"/>
		<delete file="${jboss.deploy.dir}/${war.name}.war.failed" />
		<echo message="${jboss.deploy.dir}/${war.name}.war.dodeploy" />
		<echo file="${jboss.deploy.dir}/${war.name}.war.dodeploy" message="deploy" />
		<echo file="${jboss.deploy.dir}/${war.name}.war/WEB-INF/jboss-web.xml">
		<![CDATA[ 
<jboss-web>
    <context-root>/</context-root>
    <virtual-host>${server.host}</virtual-host>
</jboss-web>
		]]>
		</echo>
		
		<sequential>
			<antcontrib:runtarget target="jboss.configure" />
			<jboss-start background="${background}" bindaddr="${server.host}" configname="${jboss.server}" jbossinstalldir="${jboss.dir}" jbossserverdir="${jboss.server.dir}" jdkhome="${jboss.jdk.home}" />
			<!-- <echoproperties prefix="runwar"/> -->
			<echo message="stop jboss by typing: ant jboss.stop"/>
		</sequential>
	</target>	

	<target name="jboss.stop">
		<antcontrib:trycatch>
			<try>
		<jboss-stop bindaddr="${server.host}" jbossinstalldir="${jboss.dir}" jdkhome="${jboss.jdk.home}" jnpport="${jboss.jnp.port}" />
		<waitfor maxwait="21" maxwaitunit="second" checkevery="7" checkeveryunit="second" timeoutproperty="toolong">
			<not>
				<socket server="${server.host}" port="${jboss.port.http}" />
			</not>
		</waitfor>
				</try>
			<catch/>
		</antcontrib:trycatch>
	    <kill-java name="jboss-modules.jar" jps="${jps.executable}"/>
	</target>	

	<target name="deploy.jboss" depends="jboss.install">
		<copy todir="${jboss.deploy.dir.rel}/${war.name}" overwrite="true">
			<fileset dir="${war.target.dir}"/>
		</copy>
	</target>	

    <!-- uses settings from deploy.xml stuff -->
    <target name="jboss.war.deploy" description="Install application to servlet container">
		<requires-ext resource="/ext/containers/jboss/" />

    </target>
	
    <!-- uses settings from deploy.xml stuff -->
    <target name="jboss.war.list" description="Install application to servlet container">
		<jboss-ant action="list"/>
    </target>

	<!-- uses settings from deploy.xml stuff -->
    <target name="war.deploy" description="Install application to servlet container">
		<requires-ext resource="/ext/containers/jboss/" />
		<antcontrib:runtarget target="check.creds" />
    	<sshsession host="${deploy.remote.host}"
    	    localtunnels="8080:localhost:8080"
			username="${deploy.remote.user}"
			passphrase="${deploy.remote.keyfile.pass}"
    		keyfile="${deploy.remote.keyfile}" trust="true" port="${deploy.remote.host.port}">
    	    <sequential>
    			<jboss-ant action="deploy"/>
    	    </sequential>
    	</sshsession>
    </target>

	<target name="war.list" description="List installed applications on servlet container">
		<requires-ext resource="/ext/containers/jboss/" />
		<antcontrib:runtarget target="check.creds" />
    	<sshsession host="${deploy.remote.host}"
    	    localtunnels="8080:localhost:8080"
			username="${deploy.remote.user}"
			passphrase="${deploy.remote.keyfile.pass}"
			keyfile="${deploy.remote.keyfile}" trust="true" port="${deploy.remote.host.port}">
    	    <sequential>
    			<jboss-ant action="list"/>
    	    </sequential>
    	</sshsession>
    </target>

	<target name="war.reload" description="Reload application on servlet container">
		<requires-ext resource="/ext/containers/jboss/" />
    	<reload url="${jboss.manager.url}"
			username="${jboss.manager.username}"
			password="${jboss.manager.password}"
			path="${app.path}"/>
    </target>
    <target name="war.remove" description="Remove application on servlet container">
		<requires-ext resource="/ext/containers/jboss/" />
    	<undeploy url="${jboss.manager.url}"
			username="${jboss.manager.username}"
			password="${jboss.manager.password}"
			path="${app.path}"/>
    </target>

	<macrodef name="jboss-ant"
	          description="runs jboss ant tasks">
	 	<attribute name="action"/>
		 <sequential>
		    <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="jboss.ant.lib.path"/>
	        <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="jboss.ant.lib.path"/>
	        <taskdef name="reload"   classname="org.apache.catalina.ant.ReloadTask" classpathref="jboss.ant.lib.path"/>
	        <taskdef name="list" classname="org.apache.catalina.ant.ListTask" classpathref="jboss.ant.lib.path"/>
	    	<echoproperties prefix="manager"/>
			<antcontrib:switch value="@{action}">
			  <case value="list">
			    <list url="${jboss.manager.url}"
					username="${jboss.manager.username}"
					password="${jboss.manager.password}"/>
			  </case>
			  <case value="deploy">
		    	<deploy url="${jboss.manager.url}"
		    			username="${jboss.manager.username}"
		    			password="${jboss.manager.password}"
		    			path="${war.contextpath}"
		    			update="true"
		    			war="file://${dist.dir}/${war.name}.war"/>
			  </case>
			  <case value="qa">
			  	<property name="copy.mappings.to.war" value="true" />
			  </case>
			  <case value="prod">
			  	<property name="copy.mappings.to.war" value="true" />
			  </case>
			  <default>
			  	<fail message="Um, the build type '${build.type}' is unknown to me, esse!" />
			  </default>
			</antcontrib:switch>
		 </sequential>
	</macrodef>
	
	<macrodef name="jboss-start">
	    <attribute name="jdkHome"/>
	    <attribute name="jbossInstallDir"/>
	    <attribute name="jbossServerDir"/>
	    <attribute name="configName" default="default"/>
	    <attribute name="background" default="false"/>
	    <attribute name="bindAddr"/>
	    <sequential>
	        <!--
	        <available file="@{jdkHome}/lib/tools.jar" property="java.tools.jar.exists"/>
	        <fail unless="java.tools.jar.exists" message="Unable to find @{jdkHome}/lib/tools.jar"/>
	        -->
	        <available file="${jboss.dir}/jboss-modules.jar" property="jboss.run.jar.exists"/>
	        <fail unless="jboss.run.jar.exists" message="Unable to find ${jboss.dir}/jboss-modules.jar"/>
        	<antcontrib:var name="server.jvm.args" value="-XX:+HeapDumpOnOutOfMemoryError -Xms${jboss.heap.size} -Xmx${jboss.heap.size} -XX:PermSize=${jboss.perm.size} -XX:MaxPermSize=${jboss.perm.size.max} ${server.gc} -Djava.net.preferIPv4Stack=true ${server.java.opts}" />
	        
	        <echo>Starting JBoss ${jboss.type} with ${server.jvm.args} in @{jbossServerDir}...</echo>
	        <java jvm="@{jdkHome}/bin/java"
	              dir="@{jbossServerDir}" jar="${jboss.dir}/jboss-modules.jar"
	               fork="true" spawn="@{background}">
	            <arg line="-mp ${jboss.dir}/modules -jaxpmodule javax.xml.jaxp-provider org.jboss.as.standalone -Djava.util.logging.manager=org.jboss.logmanager -Djboss.home.dir=${jboss.dir}"/>
				<jvmarg line="${server.jvm.args}"/>
	            <sysproperty key="org.jboss.boot.log.file" value="${jboss.dir}/standalone/log/boot.log"/>
	            <sysproperty key="logging.configuration" value="file:${jboss.dir}/standalone/configuration/logging.properties"/>
	            <sysproperty key="jboss.server.home.url" value="file://@{jbossServerDir}"/>
	            <sysproperty key="jboss.home.dir" value="${jboss.dir}"/>
	            <classpath>
	                <pathelement path="${jboss.dir}/jboss-modules.jar"/>
	            </classpath>
	        </java>
	    </sequential>
	</macrodef>
	
	<macrodef name="jboss-stop">
	    <attribute name="jdkHome"/>
	    <attribute name="jbossInstallDir"/>
	    <attribute name="bindAddr"/>
	    <attribute name="jnpPort"/>
	    <sequential>
	        <available file="@{jbossInstallDir}/bin/shutdown.jar" property="jboss.shutdown.jar.exists"/>
	        <fail unless="jboss.shutdown.jar.exists" message="Unable to find @{jbossInstallDir}/bin/sutdown.jar"/>
	        <available file="@{jbossInstallDir}/client/jbossall-client.jar" property="jboss.client.jar.exists"/>
	        <fail unless="jboss.client.jar.exists"
	              message="Unable to find @{jbossInstallDir}/client/jbossall-client.jar"/>
	        <java jvm="@{jdkHome}/bin/java"
	              classname="org.jboss.Shutdown" fork="true" failonerror="false" resultproperty="shutdown.rc">
	            <arg line="-s jnp://@{bindAddr}:@{jnpPort}"/>
	            <classpath>
	                <pathelement path="@{jbossInstallDir}/bin/shutdown.jar"/>
	                <pathelement path="@{jbossInstallDir}/client/jbossall-client.jar"/>
	            </classpath>
	        </java>
	        <echo>Shutdown rc = ${shutdown.rc}</echo>
	        <condition property="shutdown.okay">
	            <equals arg1="${shutdown.rc}" arg2="0"/>
	        </condition>
	    	<!--
	        <fail unless="shutdown.okay" message="Unable to shut down JBoss (maybe it hasn't fully started yet?)."/>
	        -->
	        <echo>Waiting for @{bindAddr}:@{jnpPort} to stop listening...</echo>
	        <waitfor maxwait="2" maxwaitunit="minute">
	            <not>
	                <socket server="@{bindAddr}" port="@{jnpPort}"/>
	            </not>
	        </waitfor>
	    </sequential>
	</macrodef>
	
	<macrodef name="jboss-domain-interface">
	    <attribute name="name"/>
	    <element name="interface" implicit="true"/>
	    <sequential>
	    	<xml-to-property property="interface.xml"><interface/></xml-to-property>
	    	<echo>${interface.xml}</echo>
			<xmltask source="${jboss.domain.config.file}" dest="${jboss.domain.config.file}">
				<remove path="//*[local-name()='interfaces']/*[local-name()='interface'][@name='@{name}']"/>
				<print path="//*[local-name()='interfaces']/*[local-name()='interface'][@name='@{name}']"/>
				<insert path="//*[local-name()='interfaces']" position="under"><![CDATA[<interface name="internal" xmlns="urn:jboss:domain:1.0">${interface.xml}</interface>]]></insert>
				<attr path="//:*[@interface='external']" attr="interface" value="@{name}" />
				<attr path="//:*[@default-interface='external']" attr="default-interface" value="@{name}" />
			</xmltask>
	    </sequential>
	</macrodef>

	<macrodef name="jboss-standalone-interface">
	    <attribute name="name"/>
	    <element name="interface" implicit="true"/>
	    <sequential>
	    	<xml-to-property property="interface.xml"><interface/></xml-to-property>
	    	<echo>interface @{name} : ${interface.xml}</echo>
			<xmltask source="${jboss.standalone.config.file}" dest="${jboss.standalone.config.file}">
				<remove path="//*[local-name()='interfaces']/*[local-name()='interface'][@name='@{name}']"/>
				<print path="//*[local-name()='interfaces']/*[local-name()='interface'][@name='@{name}']"/>
				<insert path="//*[local-name()='interfaces']" position="under"><![CDATA[<interface name="@{name}" xmlns="urn:jboss:domain:1.0">${interface.xml}</interface>]]></insert>
			</xmltask>
	    </sequential>
	</macrodef>

	<macrodef name="jboss-standalone-modcluster">
	    <element name="mod-cluster-config" implicit="true"/>
	    <sequential>
	    	<xml-to-property property="mod-cluster-config.xml"><mod-cluster-config/></xml-to-property>
	    	<echo>mod-cluster-config : ${mod-cluster-config.xml}</echo>
			<xmltask source="${jboss.standalone.config.file}" dest="${jboss.standalone.config.file}">
				<remove path="//*[local-name()='extensions']/*[local-name()='extension'][@module='org.jboss.as.modcluster']"/>
				<insert path="//*[local-name()='extensions']" position="under"><![CDATA[<extension module="org.jboss.as.modcluster" xmlns="urn:jboss:domain:1.0" />]]></insert>
				<remove path="//*[namespace-uri()='urn:jboss:domain:modcluster:1.0']"/>
				<insert path="//*[local-name()='profile']" position="under"><![CDATA[<subsystem xmlns="urn:jboss:domain:modcluster:1.0">${mod-cluster-config.xml}</subsystem>]]></insert>
			</xmltask>
	    </sequential>
	</macrodef>


	<macrodef name="jboss-standalone-socket-binding">
	    <attribute name="socket-binding-group"/>
	    <attribute name="socket-binding"/>
	    <element name="socket-binding-xml" implicit="true"/>
	    <sequential>
	    	<xml-to-property property="socket-binding.xml" namespacePolicy="elementsOnly"><socket-binding-xml/></xml-to-property>
	    	<echo>mod-cluster-config : ${socket-binding.xml}</echo>
			<xmltask source="${jboss.standalone.config.file}" dest="${jboss.standalone.config.file}">
				<remove path="//*[local-name()='socket-binding-group'][@name='@{socket-binding-group}']/*[local-name()='socket-binding'][@name='@{socket-binding}']"/>
				<insert path="//*[namespace-uri()='urn:jboss:domain:1.0' and local-name()='socket-binding-group']" position="under"><![CDATA[${socket-binding.xml}]]></insert>
			</xmltask>
	    </sequential>
	</macrodef>

	<macrodef name="jboss-host-domain-controller">
	    <element name="interface" implicit="true"/>
	    <sequential>
	    	<xml-to-property property="interface.xml"><interface/></xml-to-property>
	    	<echo>${interface.xml}</echo>
			<xmltask source="${jboss.host.config.file}" dest="${jboss.host.config.file}">
				<replace path="//*[local-name()='host']/*[local-name()='domain-controller']"><![CDATA[<domain-controller xmlns="urn:jboss:domain:1.0">${interface.xml}</domain-controller>]]></replace>
			</xmltask>
	    </sequential>
	</macrodef>

	<macrodef name="jboss-host-interface">
	    <attribute name="name"/>
	    <element name="interface" implicit="true"/>
	    <sequential>
	    	<xml-to-property property="interface.xml"><interface/></xml-to-property>
	    	<echo>${interface.xml}</echo>
			<xmltask source="${jboss.host.config.file}" dest="${jboss.host.config.file}">
				<remove path="//*[local-name()='interfaces']/*[local-name()='interface'][@name='@{name}']"/>
				<print path="//*[local-name()='interfaces']/*[local-name()='interface'][@name='@{name}']"/>
				<insert path="//*[local-name()='interfaces']" position="under"><![CDATA[<interface name="internal" xmlns="urn:jboss:domain:1.0">${interface.xml}</interface>]]></insert>
				<attr path="//:*[@interface='public']" attr="interface" value="@{name}" />
			</xmltask>
	    </sequential>
	</macrodef>
	
	<macrodef name="waitForJBoss">
	    <attribute name="jbossServerDir"/>
	    <attribute name="bindAddr"/>
	    <attribute name="jnpPort"/>
	    <sequential>
	        <echo>Waiting for @{bindAddr}:@{jnpPort} ...</echo>
	        <waitfor maxwait="2" maxwaitunit="minute">
	            <socket server="@{bindAddr}" port="@{jnpPort}"/>
	        </waitfor>
	    </sequential>
	</macrodef>
	
</project>